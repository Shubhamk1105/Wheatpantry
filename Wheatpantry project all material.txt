import React, { useState, useEffect } from "react";
import { Route, Routes, useParams } from "react-router-dom";
import Navbar from "./Compoent/NavBar/Navbar";
import Sign_IN from "./Compoent/Pages/Sign_IN";
import Profile from "./Compoent/Pages/Profile";
import Register from "./Compoent/Pages/Register";
import HomeContent from "./Compoent/Pages/HomeContent";
import Cart from "./Compoent/Cart";
import Products from "./Compoent/Pages/Products";
import Contact from "./Compoent/Pages/Contact";
import Checkout from "./Compoent/Checkout";
import OrderHistory from "./Compoent/orderHistory";
import Subscribe from "./Compoent/Pages/Subscription";
import OrderDetails from "./Compoent/orderDetails";
import SubscriptionDetailsPage from "./Compoent/Pages/SubscriptionDetailsPage";
import ForgetPassword from "./Compoent/Pages/ForgetPassword";
import Sidee from "./Admin/Sidee";
import AdminDashboard from "./Admin/AdminDashboard";
import AdminProduct from "./Admin/AdminProduct";
import User from "./Admin/User";
import { ToastContainer } from 'react-toastify';
import  PhoneSignin from "./Compoent/PhoneSignin";
import Appp from "./Appp";
import Inventory from "./Admin/Inventory";


function App() {
  const [authenticated, setAuthenticated] = useState(false);
  const [userData, setUserData] = useState(null);
  const { userId } = useParams();

  useEffect(() => {
    // Check if the user is already authenticated
    const token = localStorage.getItem("token");
    const storedUserData = localStorage.getItem("userData");
    if (token) {
      setAuthenticated(true);
    }else{
      setAuthenticated(false);
    }
  }, []);


  return (
    <div>
      <Navbar authenticated={authenticated} />
      <Routes>
      <Route path="/" element={<HomeContent />} />
        {/* <Route path="/dashboard" element={<Dashboard />} /> */}
        <Route path="/Contact" element={<Contact />} />
        <Route path="/Cart" element={<Cart />} />
        <Route path="/profile" element={<Profile />} />
        <Route
          path="/Appp"
          element={
            <Appp
              setAuthenticated={setAuthenticated}
            />
          }
        />
        <Route path="/register" element={<Register />} />
        {authenticated && (
          <Route path="/Products" element={<Products />} />

        )}
        

        <Route path="/Checkout" element={<Checkout />} />
        {/* <Route path="/user/:userId/orders">
          <OrderDetails />
        </Route> */}
        <Route path="/OrderHistory" element={<OrderHistory />} />
        <Route path="/Subscribe" element={<Subscribe/>} />
        
        {/* <Route path="/OrderDetails/:mobile" render={({ match }) => <OrderDetails mobile={match.params.mobile} />} /> */}
        <Route path="/SubscriptionDetailsPage"element={<SubscriptionDetailsPage />}/>
        <Route path="/OrderDetails"element={<OrderDetails />}/>
        <Route path="/ForgetPassword" element={<ForgetPassword />} />
        <Route path="/Sidee" element={<Sidee />} />
        <Route path="/AdminDashboard" element={<AdminDashboard />} />
        <Route path="/AdminProduct" element={<AdminProduct />} />
        <Route path="/User" element={<User />} />
        <Route path="/phoneSignin" element={<PhoneSignin />} />
        <Route path="/Inventory" element={<Inventory />} />
       

        <Route
          path="/Signin"
          element={
            <Sign_IN
              setAuthenticated={setAuthenticated}
              setUserData={setUserData}
            />
          }
          
        />
         <Route
          path="/PhoneSign"
          element={
            <PhoneSignin
              setAuthenticated={setAuthenticated}
              setUserData={setUserData}
            />
          }
        />
      </Routes>
      <ToastContainer />

    </div>
  );
}

export default App;



import axios from 'axios';

const baseURL = process.env.NODE_ENV === 'production' ? 'http://portal.wheatpantry.com' : 'http://localhost:8080/';

const instance = axios.create({
  baseURL,
  headers: {
    'Content-Type': 'application/json',
  },
});

export default instance;



import React, { useEffect, useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Snackbar } from "@mui/material";
import axios from "axios";
import { useDispatch, useSelector } from "react-redux";
import { addCart } from "../../redux/action/index";
import { motion } from "framer-motion";
import { AiOutlineMinus, AiOutlinePlus } from "react-icons/ai";
import { getToken } from "../../tokenUtils";
import api from '../../api'; // Import the axios instance
import "../Pages/PagesStyle.css"

const Products = () => {
  const [data, setData] = useState([]);
  const [openSnackbar, setOpenSnackbar] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState("");
  const [openDialog, setOpenDialog] = useState(false);
  const [pendingSubscription, setPendingSubscription] = useState(null); // Track pending subscription

  const dispatch = useDispatch();
  const navigate = useNavigate();
  const token = getToken();

  const cartFromStorage = sessionStorage.getItem("cart");
  const [cart, setCart] = useState(cartFromStorage ? JSON.parse(cartFromStorage) : []);

  const fetchData = async () => {
    try {
      const response = await api.get('/api/products');   
      setData(response.data);
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  };

  useEffect(() => {
    fetchData();
  }, [token]);

  const addToCart = (product) => {
    const data = { product: { id: product.id } };
    api
      .post("/api/cart/add", data)
      .then((response) => {
        dispatch(addCart(product));
        setSnackbarMessage(`${product.name} added to cart`);
        setOpenSnackbar(true);

        // Update session storage with the updated cart
        const updatedCart = [...cart];
        const existingProductIndex = updatedCart.findIndex((item) => item.id === product.id);
        if (existingProductIndex !== -1) {
          updatedCart[existingProductIndex].qty += 1; // Increase quantity
          updatedCart[existingProductIndex].price = product.price; // Update price
        } else {
          updatedCart.push({ ...product, qty: 1 }); // Add the product with quantity 1
        }
        setCart(updatedCart);
        sessionStorage.setItem("cart", JSON.stringify(updatedCart));
        window.location.reload(); // Refresh the page
      })
      .catch((error) => {
        console.error("Error adding item to cart:", error);
      });
  };

  const subscribeToProduct = (product) => {
    if (!token) {
      setPendingSubscription(product); // Store the product to subscribe after sign in
      setOpenDialog(true);
      return;
    }

    const data = { product: { id: product.id } };
    api
      .post("/api/cart/add", data)
      .then((response) => {
        dispatch(addCart(product));
        setSnackbarMessage(`${product.name} added to cart`);
        setOpenSnackbar(true);

        const updatedCart = [...cart];
        const existingProductIndex = updatedCart.findIndex((item) => item.id === product.id);
        if (existingProductIndex !== -1) {
          updatedCart[existingProductIndex].qty += 1;
          updatedCart[existingProductIndex].price = product.price;
        } else {
          updatedCart.push({ ...product, qty: 1 });
        }
        setCart(updatedCart);
        sessionStorage.setItem("cart", JSON.stringify(updatedCart));

        navigate(`/subscriptionDetailsPage?subscriptionPlanId=${product.subscriptionPlan.id}&productId=${product.id}`);
      })
      .catch((error) => {
        console.error("Error adding item to cart:", error);
      });
  };

  const handleCloseSnackbar = () => {
    setOpenSnackbar(false);
  };

  const handleCloseDialog = () => {
    setOpenDialog(false);
  };

  const handleSignIn = () => {
    setOpenDialog(false);
    navigate("/signin");
  };

  useEffect(() => {
    if (token && pendingSubscription) {
      subscribeToProduct(pendingSubscription); // Subscribe to the product after signing in
      setPendingSubscription(null); // Clear the pending subscription
    }
  }, [token, pendingSubscription]);

  return (
    <div className="Product-container mx-auto px-4 contapro">
      <div className="container">
        <div className="text-center toppp"></div>
      </div>

      {data.map((product, index) => (
        <div className="product-item" key={index}>
          <motion.div
            whileTap={{ scale: 0.95 }}
            className="card newcard mx-auto px-4"
            style={{ width: "200%" }}
          >
            <div className="image-container">
              <img
                src={`data:image/jpeg;base64,${product.imageUrl}`}
                alt={product.name}
                className="object-cover w-full h-56"
              />
            </div>

            <p className="product-info product-name">{product.name}</p>
            <p className="product-info product-color">{product.description}</p>
            <p className="product-info forbold">
              <span>₹</span>
              {product.price}
            </p>

            <div
              style={{
                display: "flex",
                alignItems: "center",
                marginTop: "10px",
              }}
            >
            </div>

            {product.subscriptionPlan !== null ? (
              <div
                style={{
                  display: "flex",
                  justifyContent: "center",
                  marginTop: "3px",
                }}
              >
                <Button
                  variant="contained"
                  onClick={() => subscribeToProduct(product)}
                  style={{
                    backgroundColor: "#007bff",
                    color: "#ffffff",
                  }}
                  className="cart-button"
                >
                  Subscribe
                </Button>
              </div>
            ) : (
              <div className="forcardss">
                <Button
                  onClick={() => addToCart(product)}
                  style={{
                    width: "calc(60% + 2px)",
                    backgroundColor: "#946700",
                    color: "#ffffff",
                    display: "flex",
                    alignItems: "center",
                    justifyContent: "center",
                    height: "33px",
                  }}
                  className="cart-button"
                >
                  Add to Cart
                </Button>
              </div>
            )}
          </motion.div>
        </div>
      ))}
      <Snackbar
        open={openSnackbar}
        autoHideDuration={3000}
        onClose={handleCloseSnackbar}
        message={snackbarMessage}
        anchorOrigin={{ vertical: "top", horizontal: "center" }}
      />

      <Dialog
        open={openDialog}
        onClose={handleCloseDialog}
        aria-labelledby="alert-dialog-title"
        aria-describedby="alert-dialog-description"
      >
        <DialogTitle id="alert-dialog-title">
          Please Sign In
        </DialogTitle>
        <DialogContent>
          <DialogContentText id="alert-dialog-description">
            You need to sign in to subscribe to this product.
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseDialog} color="primary">
            Close
          </Button>
          <Button onClick={handleSignIn} color="primary" autoFocus>
            Sign In
          </Button>
        </DialogActions>
      </Dialog>
    </div>
  );
};

export default Products;




import React, { useState, useEffect, useRef } from "react";
import { useSelector, useDispatch } from "react-redux";
import { Link, useLocation } from "react-router-dom";
import { addCart, delCart } from "../redux/action";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faArrowAltCircleLeft } from "@fortawesome/free-solid-svg-icons";
import { faMinus, faPlus } from "@fortawesome/free-solid-svg-icons";
import axios from "axios";
import "./Pages/PagesStyle.css";
import { FaArrowLeft } from "react-icons/fa";


function Cart() {
  const [cart, setCart] = useState([]);
  const dispatch = useDispatch();
  const location = useLocation();
  const queryParams = new URLSearchParams(location.search);
  const subscriptionType = queryParams.get("subscriptionType");
  const [discountedPrice, setDiscountedPrice] = useState(() => {
    const discountedPriceParam = queryParams.get("discountedPrice");
    return discountedPriceParam ? parseFloat(discountedPriceParam) : 0;
  });
  const prevLocation = useRef(location);

  const currencyFormatter = new Intl.NumberFormat("en-IN", {
    style: "currency",
    currency: "INR",
  });

  useEffect(() => {
    // Retrieve cart data from session storage when component mounts
    const savedCart = sessionStorage.getItem("cart");
    if (savedCart) {
      setCart(JSON.parse(savedCart));
    }
  }, []);

  useEffect(() => {
    // Save cart data to session storage whenever it changes
    sessionStorage.setItem("cart", JSON.stringify(cart));
  }, [cart]);

  const addItem = (product) => {
    const existingProductIndex = cart.findIndex((item) => item.id === product.id);
    if (existingProductIndex !== -1) {
      // If the product is already in the cart, update its quantity and price
      const updatedCart = [...cart];
      updatedCart[existingProductIndex].qty += 1; // Increase quantity
      updatedCart[existingProductIndex].price = product.price; // Update price
      setCart(updatedCart);
    } else {
      // If the product is not in the cart, add it with quantity 1
      setCart((prevCart) => [...prevCart, { ...product, qty: 1 }]);
    }
  };

  const removeItem = (product) => {
    const existingProductIndex = cart.findIndex((item) => item.id === product.id);
    if (existingProductIndex !== -1) {
      // If the product is found in the cart
      const updatedCart = [...cart];
      // Decrement quantity
      updatedCart[existingProductIndex].qty -= 1;
      // If quantity becomes zero, remove the item from the cart
      if (updatedCart[existingProductIndex].qty === 0) {
        updatedCart.splice(existingProductIndex, 1);
      }
      setCart(updatedCart);
      window.location.reload();
    }
  };

  useEffect(() => {
    const discountedPriceParam = queryParams.get("discountedPrice");
    if (discountedPriceParam) {
      setDiscountedPrice(parseFloat(discountedPriceParam));
    } else {
      setDiscountedPrice(0);
    }
  }, [queryParams]);

  useEffect(() => {
    if (prevLocation.current.pathname !== location.pathname) {
      if (cart.length === 0 || !subscriptionType) {
        setDiscountedPrice(0);
      }
    }
    prevLocation.current = location;
  }, [location.pathname, cart, subscriptionType]);

  const EmptyCart = () => {
    return (
      <div className="container" style={{ marginTop: "2cm" }}>
        <div className="row">
          <div className="col-md-12 py-5 custom-gradient text-center">
            <h4 className="p-3 display-5 text-white">Your Cart is Empty</h4>
            <Link to="/" className="btn-outline-dark mx-4 ">
              <FontAwesomeIcon icon={faArrowAltCircleLeft} className="mr-2" />
              Continue Shopping
            </Link>
          </div>
        </div>
      </div>
    );
  };

  const ShowCart = () => {
    let subtotal = 0;
    let shipping = 30.0;
    let totalItems = 0;
    let chapatiSubscription = null;

    cart.forEach((product) => {
      if (product.type === "SUBSCRIPTION") {
        chapatiSubscription = product;
      } else {
        subtotal += product.price * product.qty;
        totalItems += product.qty;
      }
    });

    const getSubscriptionDays = (price) => {
      if (price === 700) return "7 days";
      if (price === 1350) return "15 days";
      if (price === 2500) return "30 days";
      return "";
    };

    return (
      <>
        <section className="h-100 gradient-custom">
          <div className="container py-5">
            <div className="row d-flex justify-content-center my-4">
              <div className="col-md-8">
                <div className="card mb-4 rounded-lg shadow-lg">
                  <div className="card-header py-3 bg-gradient-to-tr text-white">
                    <h5 className="mb-0">Item List</h5>
                  </div>
                  <div className="card-body">
                    {cart.map((product) => {
                      if (product.type === "SUBSCRIPTION") {
                        return (
                          <div key={product.id} className="mb-4">
                            <div className="flex items-center justify-between">
                              <div className="flex items-center">
                                <img
                                  src={`data:image/jpg;base64,${product.imageUrl}`}
                                  alt={product.title}
                                  className="w-20 h-20 rounded-md mr-4"
                                />
                                <div>
                                  <p className="font-semibold">{product.name}</p>
                                  <p className="text-gray-600">
                                    {`Chapati Subscription for ${getSubscriptionDays(product.price)}`}
                                  </p>
                                </div>
                              </div>

                              <div className="flex items-center">
                                <button
                                  className="px-3 py-1 text-white red-button rounded-full mr-2  focus:outline-none"
                                  onClick={() => removeItem(product)}
                                >
                                  <FontAwesomeIcon icon={faMinus} />
                                </button>

                                <button
                                  className="px-3 py-1 text-white green-button rounded-full  focus:outline-none "
                                  onClick={() => addItem(product)}
                                  disabled={product.type === "SUBSCRIPTION"} // Disable if product type is subscription
                                >
                                  <FontAwesomeIcon icon={faPlus} />
                                </button>
                              </div>
                            </div>

                            <hr className="my-4 border-gray-300" />
                          </div>
                        );
                      } else {
                        return (
                          <div key={product.id} className="mb-4">
                            <div className="flex items-center justify-between">
                              <div className="flex items-center">
                                <img
                                  src={`data:image/jpg;base64,${product.imageUrl}`}
                                  alt={product.title}
                                  className="w-20 h-20 rounded-md mr-4"                                />
                                  <div>
                                    <p className="font-semibold">{product.name}</p>
                                    <p className="text-gray-600">
                                      Price:{" "}
                                      {currencyFormatter.format(product.price)}
                                    </p>
                                    <p className="text-gray-600">
                                      Quantity: {product.qty}
                                    </p>
                                  </div>
                                </div>
  
                                <div className="flex items-center">
                                  <button
                                    className="px-3 py-1 text-white red-button rounded-full mr-2  focus:outline-none"
                                    onClick={() => removeItem(product)}
                                  >
                                    <FontAwesomeIcon icon={faMinus} />
                                  </button>
  
                                  <button
                                    className="px-3 py-1 text-white green-button rounded-full  focus:outline-none"
                                    onClick={() => addItem(product)}
                                  >
                                    <FontAwesomeIcon icon={faPlus} />
                                  </button>
                                </div>
                              </div>
  
                              <hr className="my-4 border-gray-300" />
                            </div>
                          );
                        }
                      })}
                    </div>
                  </div>
                </div>
                <div className="col-md-4">
                  <div className="card mb-4 rounded-lg shadow-lg">
                    <div className="card-header py-3 bg-gradient-to-tr  text-white">
                      <h5 className="mb-0">Order Summary</h5>
                    </div>
                    <div className="card-body">
                      <ul className="list-group list-group-flush">
                        {cart.map((product) => {
                          if (product.type === "SUBSCRIPTION") {
                            return null;
                          }
                          return (
                            <li
                              key={product.id}
                              className="list-group-item d-flex justify-content-between align-items-center border-0 px-0 pb-0"
                            >
                              <p className="product-info product-name">
                                {product.name}
                              </p>
  
                              <span>
                                {currencyFormatter.format(
                                  product.price * product.qty
                                )}
                              </span>
                            </li>
                          );
                        })}
  
                        <li className="list-group-item d-flex justify-content-between align-items-center border-0 px-0 pb-0">
                          Products ({totalItems})
                          <span>{currencyFormatter.format(subtotal)}</span>
                        </li>
                        {chapatiSubscription && (
                          <li className="list-group-item d-flex justify-content-between align-items-center border-0 px-0 pb-0">
                            <p className="product-info product-name">
                              Chapati Subscription price{" "}
                              {/* {(chapatiSubscription.price)} */}
                            </p>
                            <span>
                              {currencyFormatter.format(chapatiSubscription.price)}
                            </span>
                          </li>
                        )}
                        <li className="list-group-item d-flex justify-content-between align-items-center px-0">
                          Shipping
                          <span>{currencyFormatter.format(shipping)}</span>
                        </li>
                        <li className="list-group-item d-flex justify-content-between align-items-center border-0 px-0 mb-3">
                          <div>
                            <strong>Total amount</strong>
                          </div>
                          <span>
                            <strong>
                              {currencyFormatter.format(
                                subtotal +
                                (chapatiSubscription ? chapatiSubscription.price : 0) +
                                shipping
                              )}
                            </strong>
                          </span>
                        </li>
                      </ul>
                      <div className="flex justify-center">
                        <Link
                          to={{
                            pathname: "/Checkout",
                            state: {
                              totalAmount: subtotal +
                                (chapatiSubscription ? chapatiSubscription.price : 0) +
                                shipping
                            }
                          }}
                          className="btn btn-lg btn-block focus:outline-none green-button"
                        >
                          Go to Checkout
                        </Link>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </section>
        </>
      );
    };
  
    return (
      <div className="container my-3 py-3">
        <h1 className="text-center text-3xl font-semibold mb-6">Cart</h1>
        {cart.length > 0 ? <ShowCart /> : <EmptyCart />}
  
        <Link
          to="/"
          className="block mt-4 text-sm text-blue-500 hover:underline flex items-center"
        >
          <FaArrowLeft className="mr-2" />
          Back to Home
        </Link>
      </div>
    );
  }
  
  export default Cart;



import React, { useState, useEffect } from "react";
import { useSelector } from "react-redux";
import { Link, useLocation } from "react-router-dom";
import { FaArrowLeft } from "react-icons/fa";
import axios from "axios";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import api from "../api"; // Import the axios instance

const Checkout = () => {
  const state = useSelector((state) => state.handleCart);
  const location = useLocation();
  const [cart, setCart] = useState([]);
  const [chapatiSubscription, setChapatiSubscription] = useState(null);
  const [error, setError] = useState(null);
  const [paymentStatus, setPaymentStatus] = useState(null);
  const [products, setProducts] = useState([]);
  const [subtotal, setSubtotal] = useState(0);
  const [totalAmount, setTotalAmount] = useState(0);
  const [orders, setOrders] = useState([]);
  const queryParams = new URLSearchParams(location.search);
  const discountedPrice = parseFloat(queryParams.get("discountedPrice")) || 0;
  const shipping = parseFloat(queryParams.get("shipping")) || 0;
  const [orderDetails, setOrderDetails] = useState({});
  const [userData, setUserData] = useState({
    firstName: "", // Initialize with empty strings
    lastName: "", // Initialize with empty strings
    email: "", // Initialize with empty strings
    address: "", // Initialize with empty strings
    address1: "", // Initialize with empty strings
    city: "", // Initialize with empty strings
    mobile: "", // Initialize with empty strings
    zip: "", // Initialize with empty strings
  });


  const currencyFormatter = new Intl.NumberFormat("en-IN", {
    style: "currency",
    currency: "INR",
  });

  const EmptyCart = () => (
    <div className="container pt-40">
      <div className="row">
        <div className="col-md-12 py-5 text-center custom-gradient">
          <h4 className="p-3 display-5 text-white">No item in Cart</h4>
          <Link to="/Products" className="btn btn-outline-dark mx-4">
            <FaArrowLeft /> Continue Shopping
          </Link>
        </div>
      </div>
    </div>
  );

// Function to fetch user details after login
const fetchUserData = async (userId) => {
  try {
    const response = await api.get(`/api/users/${userId}`);
    const userData = response.data;

    // Log the fetched user data
    console.log("Fetched User Data:", userData);

    // Set the user data to state
    setUserData(userData);

    // Autofill billing address fields with user data
    document.getElementById("firstName").value = userData.firstName || "";
    document.getElementById("lastName").value = userData.lastName || "";
    document.getElementById("email").value = userData.email || "";
    document.getElementById("address").value = userData.address || "";
    document.getElementById("address1").value = userData.address1 || "";
    document.getElementById("city").value = userData.city || "";
    document.getElementById("mobile").value = userData.mobile || "";
    document.getElementById("zip").value = userData.zip || "";
  } catch (error) {
    console.error("Error fetching user data:", error);
  }
};

  useEffect(() => {
    const userData = JSON.parse(localStorage.getItem("userData"));

    if (userData && userData.id) {
      // Fetch user data after login
      fetchUserData(userData.id);
    } else {
      alert("User data not found in local storage");
    }
  }, []);


 







  const fetchData = async () => {
    try {
      const response = await api.get("/api/products");
      setProducts(response.data);
    } catch (error) {
      console.error("Error fetching data:", error);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  useEffect(() => {
    const savedCart = sessionStorage.getItem("cart");
    if (savedCart) {
      const parsedCart = JSON.parse(savedCart);
      setCart(parsedCart);

      const chapatiItem = parsedCart.find((item) =>
        item.name.toLowerCase().includes("chapati")
      );
      if (chapatiItem) {
        setChapatiSubscription(chapatiItem);
      }

      // Calculate subtotal based on product prices and quantities
      const cartSubtotal = parsedCart.reduce(
        (total, product) => total + product.price * product.qty,
        0
      );
      setSubtotal(cartSubtotal);
    }
  }, []);

  useEffect(() => {
    // Calculate total amount including shipping, discounted price, and subscription price
    const newTotalAmount =
      subtotal +
      shipping -
      discountedPrice +
      (chapatiSubscription ? chapatiSubscription.price : 0);
    setTotalAmount(newTotalAmount);
  }, [subtotal, shipping, discountedPrice, chapatiSubscription]);

  const calculateTotalAmount = () => {
    let subtotal = 0;
    cart.forEach((item) => {
      subtotal += item.price * item.qty;
    });
    const shipping = 30.0;
    return subtotal + shipping - discountedPrice;
  };

  const validateBillingAddress = () => {
    const fields = [
      "firstName",
      "lastName",
      "email",
      "address",
      "address1",
      "city",
      "mobile",
      "zip",
    ];
    for (let field of fields) {
      if (!document.getElementById(field).value.trim()) {
        return false;
      }
    }
    return true;
  };

  const handleNameCityInputChange = (event) => {
    const inputValue = event.target.value;
    const lettersOnly = inputValue.replace(/[^a-zA-Z]/g, "");
    event.target.value = lettersOnly;
  };

  const handleMobileInputChange = (event) => {
    const inputValue = event.target.value;
    const numericValue = inputValue.replace(/\D/g, "");
    event.target.value = numericValue;

    if (numericValue === "411033") {
      document.getElementById("city").value = "Pune";
    } else {
      document.getElementById("city").value = "";
    }
  };

  const handlePayOnDelivery = (event) => {
    event.preventDefault();
    const isValidBillingAddress = validateBillingAddress();
    if (!isValidBillingAddress) {
      setError("Please fill fields");
      return;
    } else {
      setError(null);
    }

    const enteredZipCode = document.getElementById("zip").value.trim();
    if (enteredZipCode !== "411033") {
      setError("Delivery is not available for this area.");
      if (enteredZipCode.length === 4 || enteredZipCode.length === 5) {
        document.getElementById("zip").value = "";
      }
      return;
    } else {
      setError(null);
    }

    const mobileInput = document.getElementById("mobile");
    if (mobileInput.value.trim().length !== 10) {
      if (mobileInput.value.trim().length === 9) {
        setError(null);
      } else {
        setError("Mobile number must be a valid 10-digit number.");
      }
      mobileInput.value = "";
      return;
    } else {
      setError(null);
    }

    const addProductsPromises = cart.map((product) => {
      const data = { product: { id: product.id } };
      return api
        .post("/api/cart/add", data)
        .then((response) => {
          console.log(`${product.name} added to cart`);
        })
        .catch((error) => {
          console.error("Error adding product to cart:", error);
        });
    });

    Promise.all(addProductsPromises)
      .then(() => {
        const orderItems = cart.map((product) => ({
          product: { id: product.id },
          quantity: product.qty,
        }));

        const calculatedTotalAmount = calculateTotalAmount();

        const orderData = {
          orderDate: new Date().toISOString(),
          totalAmount: calculatedTotalAmount,
          status: "PROCESSING",
          firstName: document.getElementById("firstName").value,
          lastName: document.getElementById("lastName").value,
          address: document.getElementById("address").value,
          address1: document.getElementById("address1").value,
          city: document.getElementById("city").value,
          zip: document.getElementById("zip").value,
          shipping: 30,
          email: document.getElementById("email").value,
          mobile: document.getElementById("mobile").value,
          orderItems: orderItems,
        };
        sessionStorage.setItem("userData", JSON.stringify(orderData));
        sessionStorage.setItem("orderItems", JSON.stringify(orderItems));

        api
          .post("/api/orders/place", orderData)
          .then((response) => {
            console.log("Total amount:::::::::", totalAmount);
            const id = response.data.id;
            toast.success("Order placed successfully!", {
              position: "top-right",
              autoClose: 2000,
              hideProgressBar: false,
              closeOnClick: true,
              pauseOnHover: true,
              draggable: true,
              progress: undefined,
            });

            sessionStorage.removeItem("cart");
            redirectToOrderDetails(id);
          })
          .catch((error) => {
            setPaymentStatus("error");
            console.error("Error placing order:", error);
          });
      })
      .catch((error) => {
        console.error("Error adding products to cart:", error);
      });
  };

  const redirectToOrderDetails = (id) => {
    setTimeout(() => {
      window.location.href = `/OrderDetails?id=${id}`;
    }, 2500);
  };


  // const fetchOrderHistory = async (userId) => {
  //   try {
  //     const response = await api.get(`/api/orders/${userId}`);
  //     const orders = response.data;
  
  //     // Store orders in state
  //     setOrders(orders);
  
  //     // Fetch details for each order
  //     const orderDetailsPromises = orders.map((order) => {
  //       return fetchOrderDetails(order.id);
  //     });
  
  //     await Promise.all(orderDetailsPromises);
  //   } catch (error) {
  //     console.error("Error fetching order history:", error);
  //   }
  // };
  
  // const fetchOrderDetails = async (orderId) => {
  //   try {
  //     const response = await api.get(`/api/orders/summery/${orderId}`);
  //     const orderData = response.data;
  
  //     // Autofill firstname and lastname if available
  //     if (orderData.firstName && orderData.lastName) {
  //       document.getElementById("firstName").value = orderData.firstName;
  //       document.getElementById("lastName").value = orderData.lastName;
  //     }
  
  //     // Update state with order details
  //     setOrderDetails((prevOrderDetails) => ({
  //       ...prevOrderDetails,
  //       [orderId]: orderData,
  //     }));
  
  //     // Store order details in local storage
  //     localStorage.setItem("orderDetails", JSON.stringify(orderDetails));
  //   } catch (error) {
  //     console.error("Error fetching order details:", error);
  //   }
  // };
  
  // // Fetch user data and order history on component mount
  // useEffect(() => {
  //   const storedUserData = JSON.parse(localStorage.getItem("userData"));
  //   if (storedUserData) {
  //     setUserData(storedUserData);
  //     if (storedUserData.id) {
  //       fetchOrderHistory(storedUserData.id);
  //     }
  //   } else {
  //     alert("User data not found in local storage");
  //   }
  // }, []);
  




  const ShowCart = () => {
    let subtotal = 0;
    let shipping = 30.0;
    let totalItems = 0;
    let chapatiSubscription = null;

    cart.forEach((product) => {
      if (product.type === "SUBSCRIPTION") {
        chapatiSubscription = product;
      } else {
        subtotal += product.price * product.qty;
        totalItems += product.qty;
      }
    });

    return (
      <>
        <div className="container py-5">
          <div className="row my-4">
            <div className="col-md-5 col-lg-4 order-md-last">
              <div className="card mb-4">
                <div className="card-header py-3">
                  <h5 className="mb-0 text-white">Order Summary</h5>
                </div>

                <div className="card-body">
                  <ul className="list-group list-group-flush">
                    {cart.map((product) => {
                      if (product.type === "SUBSCRIPTION") {
                        return null;
                      }
                      return (
                        <li
                          key={product.id}
                          className="list-group-item d-flex justify-content-between align-items-center border-0 px-0pb-0"
                        >
                          <p className="product-info product-name">
                            {product.name}
                          </p>

                          <span>
                            {currencyFormatter.format(
                              product.price * product.qty
                            )}
                          </span>
                        </li>
                      );
                    })}

                    <li className="list-group-item d-flex justify-content-between align-items-center border-0 px-0 pb-0">
                      Products ({totalItems})
                      <span>{currencyFormatter.format(subtotal)}</span>
                    </li>
                    {chapatiSubscription && (
                      <li className="list-group-item d-flex justify-content-between align-items-center border-0 px-0 pb-0">
                        <p className="product-info product-name">
                          Chapati Subscription price
                        </p>
                        <span>
                          {currencyFormatter.format(chapatiSubscription.price)}
                        </span>
                      </li>
                    )}
                    <li className="list-group-item d-flex justify-content-between align-items-center px-0">
                      Shipping
                      <span>{currencyFormatter.format(shipping)}</span>
                    </li>
                    <li className="list-group-item d-flex justify-content-between align-items-center border-0 px-0 mb-3">
                      <div>
                        <strong>Total amount</strong>
                      </div>
                      <span>
                        <strong>
                          {currencyFormatter.format(
                            subtotal +
                              (chapatiSubscription
                                ? chapatiSubscription.price
                                : 0) +
                              shipping
                          )}
                        </strong>
                      </span>
                    </li>
                  </ul>
                </div>
              </div>
            </div>
            <div className="col-md-7 col-lg-8">
              <div className="card mb-4">
                <div className="card-header py-3">
                  <h4 className="mb-0 text-white">Billing address</h4>
                </div>
                <div className="card-body">
                  <form className="needs-validation" noValidate>
                    <div className="row g-3">
                      <div className="col-sm-6 my-1">
                        <label htmlFor="firstName" className="form-label">
                          First name
                        </label>
                        <input
                          type="text"
                          className="form-control"
                          id="firstName"
                          placeholder="Enter First Name"
                          onChange={handleNameCityInputChange}
                          required
                        />
                        <div className="invalid-feedback">
                          Valid first name is required.
                        </div>
                      </div>

                      <div className="col-sm-6 my-1">
                        <label htmlFor="lastName" className="form-label">
                          Last name
                        </label>
                        <input
                          type="text"
                          className="form-control"
                          id="lastName"
                          placeholder="Enter Last Name"
                          onChange={handleNameCityInputChange}
                          required
                        />
                        <div className="invalid-feedback">
                          Valid last name is required.
                        </div>
                      </div>

                      <div className="col-12 my-1">
                        <label htmlFor="email" className="form-label">
                          Email
                        </label>
                        <input
                          type="email"
                          className="form-control"
                          id="email"
                          placeholder="you@example.com"
                          defaultValue={
                            JSON.parse(localStorage.getItem("userData"))
                              ?.email || ""
                          }
                          required
                        />
                        <div className="invalid-feedback">
                          Please enter a valid email address for shipping
                          updates.
                        </div>
                      </div>

                      <div className="col-12 my-1">
                        <label htmlFor="address" className="form-label">
                          Address
                        </label>
                        <input
                          type="text"
                          className="form-control"
                          id="address"
                          placeholder="Enter Address1"
                          required
                        />
                        <div className="invalid-feedback">
                          Please enter your shipping address.
                        </div>
                      </div>

                      <div className="col-12 my-1">
                        <label htmlFor="address1" className="form-label">
                          Address1
                        </label>
                        <input
                          type="text"
                          className="form-control"
                          id="address1"
                          placeholder="Enter Address1"
                          required
                        />
                        <div className="invalid-feedback">
                          Please enter your shipping address1.
                        </div>
                      </div>

                      <div className="col-md-4 my-1">
                        <label htmlFor="mobile" className="form-label">
                          Mobile Number
                        </label>
                        <input
                          type="tel"
                          className="form-control"
                          id="mobile"
                          placeholder="Enter your mobile number"
                          pattern="[0-9]{10}"
                          title="Please enter a 10-digit mobile number"
                          maxLength="10"
                          onChange={handleMobileInputChange}
                          defaultValue={
                            JSON.parse(localStorage.getItem("userData"))
                              ?.mobile || ""
                          }
                          required
                        />
                        <div className="invalid-feedback">
                          Mobile number must be a valid 10-digit number.
                        </div>
                      </div>

                      <div className="col-md-3 my-1">
                        <label htmlFor="zip" className="form-label">
                          Zip code
                        </label>
                        <input
                          type="text"
                          className="form-control"
                          id="zip"
                          placeholder=""
                          pattern="\d{6}"
                          title="Please enter a 6-digit numeric ZIP code"
                          maxLength="6"
                          onChange={handleMobileInputChange}
                          required
                        />
                        <div className="invalid-feedback">
                          Zip code must be a 6-digit number.
                        </div>
                      </div>
                      <div className="col-md-4 my-1">
                        <label htmlFor="city" className="form-label">
                          City
                        </label>
                        <input
                          type="text"
                          className="form-control"
                          id="city"
                          placeholder="Enter your City"
                          onChange={handleNameCityInputChange}
                          required
                        />
                        <div className="invalid-feedback">
                          Please provide a valid city.
                        </div>
                      </div>
                    </div>

                    <hr className="my-4" />
                    <button
                      className="w-100 btn custom-gradient"
                      onClick={handlePayOnDelivery}
                    >
                      Pay on Delivery
                    </button>
                    <ToastContainer />
                  </form>
                </div>
              </div>
            </div>
          </div>
        </div>
      </>
    );
  };

  return (
    <div className="container my-3 py-3">
      <h1 className="text-center "></h1>
      <hr />
      {cart.length ? <ShowCart /> : <EmptyCart />}
      <div className="mt-4">
        {error && <div className="text-danger mt-3">{error}</div>}
        {paymentStatus && (
          <div
            className={`alert ${
              paymentStatus === "success" ? "alert-success" : "alert-danger"
            } mt-3`}
            role="alert"
          >
            {paymentStatus === "success"
              ? "Order placed successfully!"
              : "Failed to place order. Please try again."}
          </div>
        )}
      </div>
      <Link
        to="/cart"
        className="block mt-4 text-sm text-blue-500 hover:underline flex items-center"
      >
        <FaArrowLeft className="mr-2" />
        Back to Cart
      </Link>
    </div>
  );
};

export default Checkout;


import React, { useState } from "react";
import axios from "axios";
import { motion } from "framer-motion";
import img1 from "../assets/11.jpg";
import "../Pages/PagesStyle.css";
import api from '../../api'; 

const Contact = () => {
  const [name, setName] = useState("");
  const [email, setEmail] = useState("");
  const [message, setMessage] = useState("");
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [errorMessage, setErrorMessage] = useState("");

  const handleMessageChange = (e) => {
    setMessage(e.target.value);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      const response = await api.post("/api/contactUs/", {
        name: name,
        email: email,
        message: message,
      });

      console.log(response.data);
      setIsSubmitted(true);
      setMessage("");
    } catch (error) {
      console.error("Failed to submit:", error);
      setErrorMessage("Failed to submit your message");
    }
  };

  return (
    <div
      className="min-h-screen flex justify-center items-center mt-5"
      style={{
        backgroundImage: `url(${img1})`,
        backgroundSize: "cover",
        backgroundPosition: "center",
        paddingTop: "3cm",
        paddingBottom: "3cm",
      }}
    >
      <div className="bg-transparent p-8 rounded-lg shadow-lg max-w-md w-full border border-black">
        <h2 className="text-2xl mb-4 font-bold text-white pddtop">Contact Us</h2>
        <div className="form-outline">
          {isSubmitted ? (
            <div>
              <p className="text-green-600 mb-4 text-white">
                Thanks for contacting us!...
              </p>
            </div>
          ) : (
            <motion.form
              onSubmit={handleSubmit}
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ duration: 0.5 }}
            >
              <div className="mb-4 border-b border-white">
                <label
                  htmlFor="name"
                  className="block text-white font-medium text-sm"
                >
                  Name
                </label>
                <input
                  type="text"
                  id="name"
                  value={name}
                  onChange={(e) => setName(e.target.value)}
                  required
                  className="w-full px-3 py-2 mt-1 focus:outline-none focus:border-blue-500 text-white text-sm bg-transparent border border-white rounded-md"
                />
              </div>

              <div className="mb-4 border-b border-white">
                <label
                  htmlFor="email"
                  className="block text-white font-medium text-sm"
                >
                  Email
                </label>
                <input
                  type="email"
                  id="email"
                  value={email}
                  onChange={(e) => setEmail(e.target.value)}
                  required
                  className="w-full px-3 py-2 mt-1 focus:outline-none focus:border-blue-500 text-white text-sm bg-transparent border border-white rounded-md"
                />
              </div>

              <div className="mb-4 border-b border-white">
                <label
                  htmlFor="message"
                  className="block text-white font-medium text-sm"
                >
                  Message
                </label>
                <textarea
                  id="message"
                  value={message}
                  onChange={handleMessageChange}
                  required
                  className="w-full px-3 py-2 mt-1 focus:outline-none focus:border-blue-500 text-white text-sm bg-transparent border border-white rounded-md"
                />
              </div>

              <button
                type="submit"
                className="text-white py-2 px-4 rounded-md transition-colors duration-300 card-header"
              >
                Submit
              </button>
            </motion.form>
          )}
        </div>
        {errorMessage && (
          <p className="text-red-600 mt-4 text-white">{errorMessage}</p>
        )}
      </div>
    </div>
  );
};

export default Contact;


import React, { useEffect, useState } from "react";
import axios from "axios";
import { RiEyeFill, RiEyeOffFill } from "react-icons/ri"; // Import eye icons
import { Link } from "react-router-dom";
import { motion } from "framer-motion";
import api from '../../api'; // Import the axios instance

const Register = () => {
  const [username, setUsername] = useState("");
  const [email, setEmail] = useState("");
  const [mobile, setMobile] = useState("");
  const [password, setPassword] = useState("");
  const [message, setMessage] = useState("");
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [criteriaMet, setCriteriaMet] = useState(false);
  const isMobileValid = mobile.length === 10;
  const [showPassword, setShowPassword] = useState(false);
  const [data, setData] = useState([]);

  // Function to fetch existing users' data
  const fetchData = async () => {
    try {
      const response = await api.get("/api/users/all");
      setData(response.data);
    } catch (error) {
      console.error("Error fetching data:", error);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  // Function to handle form submission
// Function to handle form submission
const handleSubmit = async (e) => {
  e.preventDefault();

  // Validate the form fields
  if (!validateForm()) {
    return;
  }

  // Check if email or mobile number already exists
  const emailExists = data.some((user) => user.email === email);
  const mobileExists = data.some((user) => user.mobile === mobile);

  if (emailExists) {
    setMessage("Email is already Exist.");
    return;
  }

  if (mobileExists) {
    setMessage("Mobile number is already Exist.");
    return;
  }

  try {
    // If email and mobile are unique, register the user
    const response = await api.post("/auth/signup", {
      username: username,
      email: email,
      mobile: mobile,
      password: password,
    });

    setIsSubmitted(true);
    setMessage("User registered successfully");

    // Store registration data in session storage
    const userData = { username, email, mobile };
    sessionStorage.setItem("userData", JSON.stringify(userData));

    setUsername("");
    setEmail("");
    setMobile("");
    setPassword("");
  } catch (error) {
    console.error("Error registering user:", error);
    setMessage("Failed to register user");
  }
};


  // Function to validate password strength
  const handlePasswordChange = (e) => {
    const newPassword = e.target.value;
    setPassword(newPassword);
    const isLengthValid = newPassword.length >= 8;
    const hasUpperCase = /[A-Z]/.test(newPassword);
    const hasNumber = /\d/.test(newPassword);
    const hasSymbol = /[$&+,:;=?@#|'<>.^*()%!-]/.test(newPassword);
    setCriteriaMet(isLengthValid && hasUpperCase && hasNumber && hasSymbol);
  };

  // Function to validate form fields
  const validateForm = () => {
    // Perform validation for each field
    if (username.trim() === "") {
      setMessage("Username is required");
      return false;
    }
    if (email.trim() === "") {
      setMessage("Email is required");
      return false;
    }
    if (!/\S+@\S+\.\S+/.test(email)) {
      setMessage("Invalid email address");
      return false;
    }
    if (mobile.trim() === "") {
      setMessage("Mobile number is required");
      return false;
    }
    if (mobile.length !== 10 || !/^\d+$/.test(mobile)) {
      setMessage("Invalid mobile number");
      return false;
    }
    if (password.trim() === "") {
      setMessage("Password is required");
      return false;
    }
    if (password.length < 8) {
      setMessage("Password must be at least 8 characters long");
      return false;
    }
    if (!/[A-Z]/.test(password)) {
      setMessage("Must Follow Validations");
      return false;
    }
    if (!/\d/.test(password)) {
      setMessage("Password must contain at least one number");
      return false;
    }
    if (!/[$&+,:;=?@#|'<>.^*()%!-]/.test(password)) {
      setMessage("Password must contain at least one special character");
      return false;
    }

    // All validations passed
    return true;
  };

  // Function to toggle password visibility
  const toggleShowPassword = () => {
    setShowPassword(!showPassword);
  };

  // Function to handle username change
  const handleUsernameChange = (e) => {
    setUsername(e.target.value);
  };

  // Function to handle email change
  const handleEmailChange = (e) => {
    setEmail(e.target.value);
  };

  // Function to handle mobile number change
  const handleMobileChange = (event) => {
    const inputMobile = event.target.value;
    const cleanedMobile = inputMobile.replace(/\D/g, "");
    setMobile(cleanedMobile);
  };

  return (
    <div className="flex flex-col md:flex-row min-h-screen bg-gray-100">
      <div className="md:w-2/5 p-8 md:pt-20"> {/* Increased padding by 2cm */}
        {/* Image Container */}
        <img
          src="https://storage.googleapis.com/prod-phoneemail-prof-images/phem-widgets/phe-signin-box.svg"
          alt="Sign In Box"
          className="max-w-sm mx-auto md:mx-0"
          style={{ paddingTop: "2cm" }}
        />
      </div>

      <div className="md:w-3/5 flex justify-center items-center p-8 md:pt-16">
        <div className="bg-white p-8 rounded-lg shadow-lg max-w-md border border-black w-full md:w-4/5">
          <h2 className="text-2xl mb-4 font-bold text-gray-800">Registration</h2>
          {isSubmitted ? (
            <div>
              {/* <p className="text-green-600 mb-4 text-gray-800">
                Thanks for registering!
              </p> */}
            </div>
          ) : (
            <motion.form
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ duration: 0.5 }}
              onSubmit={handleSubmit}
            >
              <div className="mb-4 border-b border-gray-300">
                <label
                  htmlFor="username"
                  className="block text-gray-800 font-medium text-sm"
                >
                  <span className="text-red-500">*</span>Username
                </label>
                <input
                  type="text"
                  id="name"
                  value={username}
                  onChange={handleUsernameChange}
                  placeholder="Enter username"
                  required
                  className="w-full px-3 py-2 mt-1 focus:outline-none focus:border-blue-500 text-gray-800 text-sm bg-transparent border border-gray-300 rounded-md"
                />
              </div>

              <div className="mb-4 border-b border-gray-300">
                <label
                  htmlFor="email"
                  className="block text-gray-800 font-medium text-sm"
                >
                  <span className="text-red-500">*</span>Email
                </label>
                <input
                  type="email"
                  id="email"
                  value={email}
                  onChange={handleEmailChange}
                  placeholder="Enter email"
                  required
                  pattern="[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"
                  className="w-full px-3 py-2 mt-1 focus:outline-none focus:border-blue-500 text-gray-800 text-sm bg-transparent border border-gray-300 rounded-md"
                />
              </div>

              <div className="mb-4 border-b border-gray-300">
                <label
                  htmlFor="mobile"
                  className="block text-gray-800 font-medium text-sm"
                >
                  <span className="text-red-500">*</span>Mobile
                </label>
                <input
                  type="tel"
                  id="mobile"
                  value={mobile}
                  onChange={handleMobileChange}
                  placeholder="Enter mobile number"
                  required
                  className={`w-full px-3 py-2 mt-1 focus:outline-none focus:border-blue-500 text-gray-800 text-sm bg-transparent border ${
                    isMobileValid || mobile.length === 0
                      ? "border-gray-300"
                      : "border-red-500"
                  } rounded-md`}
                />
                {mobile.length > 0 && !isMobileValid && (
                  <p className="text-red-500 text-xs mt-1">
                    Please enter a 10-digit mobile number.
                  </p>
                )}
              </div>

              <div className="mb-4 border-b border-gray-300">
                <label
                  htmlFor="password"
                  className="block text-gray-800 font-medium text-sm"
                >
                  <span className="text-red-500">*</span>Password
                </label>
                <div className="relative">
                  <input
                    type={showPassword ? "text" : "password"}
                    id="password"
                    value={password}
                    onChange={handlePasswordChange}
                    placeholder="Enter password"
                    required
                    className="w-full px-3 py-2 mt-1 focus:outline-none focus:border-blue-500 text-gray-800 text-sm bg-transparent border border-gray-300 rounded-md pr-10"
                  />
                  <button
                    type="button"
                    onClick={toggleShowPassword}
                    className="absolute inset-y-0 right-0 flex items-center px-2 text-gray-800"
                  >
                    {showPassword ? <RiEyeOffFill /> : <RiEyeFill />}
                  </button>
                </div>
                {password && (
                  <div className="password-strength-feedback">
                    {!criteriaMet && password.length < 8 && (
                      <p style={{ color: "red" }}>
                        &#10007; Password must be at least 8 characters long.
                      </p>
                    )}
                    {!criteriaMet && !/[A-Z]/.test(password) && (
                      <p style={{ color: "red" }}>
                        &#10007; Include at least one uppercase letter.
                      </p>
                    )}
                    {!criteriaMet && !/\d/.test(password) && (
                      <p style={{ color: "red" }}>
                        &#10007; Include at least one number.
                      </p>
                    )}
                    {!criteriaMet &&
                      !/[$&+,:;=?@#|'<>.^*()%!-]/.test(password) && (
                        <p style={{ color: "red" }}>
                          &#10007; Include at least one symbol.
                        </p>
                      )}
                    {criteriaMet && (
                      <p style={{ color: "green" }}>&#10003; Strong Password.</p>
                    )}
                  </div>
                )}
              </div>

              <button
                type="submit"
                className="card-header text-white py-2 px-4 rounded-md transition-colors duration-300 bg-blue-500 hover:bg-blue-600 focus:outline-none focus:bg-blue-600"
              >
                Register
              </button>
            </motion.form>
          )}
          {message && <p className="text-gray-800">{message}</p>}
          <p className="text-center mt-3 text-gray-600">
            If you have an account, please <Link to="/Signin">Sign In Now</Link>
          </p>
        </div>
      </div>
    </div>
  );
};

export default Register;


import React, { useEffect, useState } from "react";
import axios from "axios";
import { RiEyeFill, RiEyeOffFill } from "react-icons/ri"; // Import eye icons
import { Link } from "react-router-dom";
import { motion } from "framer-motion";
import api from '../../api'; // Import the axios instance

const Register = () => {
  const [username, setUsername] = useState("");
  const [email, setEmail] = useState("");
  const [mobile, setMobile] = useState("");
  const [password, setPassword] = useState("");
  const [message, setMessage] = useState("");
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [criteriaMet, setCriteriaMet] = useState(false);
  const isMobileValid = mobile.length === 10;
  const [showPassword, setShowPassword] = useState(false);
  const [data, setData] = useState([]);

  // Function to fetch existing users' data
  const fetchData = async () => {
    try {
      const response = await api.get("/api/users/all");
      setData(response.data);
    } catch (error) {
      console.error("Error fetching data:", error);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  // Function to handle form submission
// Function to handle form submission
const handleSubmit = async (e) => {
  e.preventDefault();

  // Validate the form fields
  if (!validateForm()) {
    return;
  }

  // Check if email or mobile number already exists
  const emailExists = data.some((user) => user.email === email);
  const mobileExists = data.some((user) => user.mobile === mobile);

  if (emailExists) {
    setMessage("Email is already Exist.");
    return;
  }

  if (mobileExists) {
    setMessage("Mobile number is already Exist.");
    return;
  }

  try {
    // If email and mobile are unique, register the user
    const response = await api.post("/auth/signup", {
      username: username,
      email: email,
      mobile: mobile,
      password: password,
    });

    setIsSubmitted(true);
    setMessage("User registered successfully");

    // Store registration data in session storage
    const userData = { username, email, mobile };
    sessionStorage.setItem("userData", JSON.stringify(userData));

    setUsername("");
    setEmail("");
    setMobile("");
    setPassword("");
  } catch (error) {
    console.error("Error registering user:", error);
    setMessage("Failed to register user");
  }
};


  // Function to validate password strength
  const handlePasswordChange = (e) => {
    const newPassword = e.target.value;
    setPassword(newPassword);
    const isLengthValid = newPassword.length >= 8;
    const hasUpperCase = /[A-Z]/.test(newPassword);
    const hasNumber = /\d/.test(newPassword);
    const hasSymbol = /[$&+,:;=?@#|'<>.^*()%!-]/.test(newPassword);
    setCriteriaMet(isLengthValid && hasUpperCase && hasNumber && hasSymbol);
  };

  // Function to validate form fields
  const validateForm = () => {
    // Perform validation for each field
    if (username.trim() === "") {
      setMessage("Username is required");
      return false;
    }
    if (email.trim() === "") {
      setMessage("Email is required");
      return false;
    }
    if (!/\S+@\S+\.\S+/.test(email)) {
      setMessage("Invalid email address");
      return false;
    }
    if (mobile.trim() === "") {
      setMessage("Mobile number is required");
      return false;
    }
    if (mobile.length !== 10 || !/^\d+$/.test(mobile)) {
      setMessage("Invalid mobile number");
      return false;
    }
    if (password.trim() === "") {
      setMessage("Password is required");
      return false;
    }
    if (password.length < 8) {
      setMessage("Password must be at least 8 characters long");
      return false;
    }
    if (!/[A-Z]/.test(password)) {
      setMessage("Must Follow Validations");
      return false;
    }
    if (!/\d/.test(password)) {
      setMessage("Password must contain at least one number");
      return false;
    }
    if (!/[$&+,:;=?@#|'<>.^*()%!-]/.test(password)) {
      setMessage("Password must contain at least one special character");
      return false;
    }

    // All validations passed
    return true;
  };

  // Function to toggle password visibility
  const toggleShowPassword = () => {
    setShowPassword(!showPassword);
  };

  // Function to handle username change
  const handleUsernameChange = (e) => {
    setUsername(e.target.value);
  };

  // Function to handle email change
  const handleEmailChange = (e) => {
    setEmail(e.target.value);
  };

  // Function to handle mobile number change
  const handleMobileChange = (event) => {
    const inputMobile = event.target.value;
    const cleanedMobile = inputMobile.replace(/\D/g, "");
    setMobile(cleanedMobile);
  };

  return (
    <div className="flex flex-col md:flex-row min-h-screen bg-gray-100">
      <div className="md:w-2/5 p-8 md:pt-20"> {/* Increased padding by 2cm */}
        {/* Image Container */}
        <img
          src="https://storage.googleapis.com/prod-phoneemail-prof-images/phem-widgets/phe-signin-box.svg"
          alt="Sign In Box"
          className="max-w-sm mx-auto md:mx-0"
          style={{ paddingTop: "2cm" }}
        />
      </div>

      <div className="md:w-3/5 flex justify-center items-center p-8 md:pt-16">
        <div className="bg-white p-8 rounded-lg shadow-lg max-w-md border border-black w-full md:w-4/5">
          <h2 className="text-2xl mb-4 font-bold text-gray-800">Registration</h2>
          {isSubmitted ? (
            <div>
              {/* <p className="text-green-600 mb-4 text-gray-800">
                Thanks for registering!
              </p> */}
            </div>
          ) : (
            <motion.form
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ duration: 0.5 }}
              onSubmit={handleSubmit}
            >
              <div className="mb-4 border-b border-gray-300">
                <label
                  htmlFor="username"
                  className="block text-gray-800 font-medium text-sm"
                >
                  <span className="text-red-500">*</span>Username
                </label>
                <input
                  type="text"
                  id="name"
                  value={username}
                  onChange={handleUsernameChange}
                  placeholder="Enter username"
                  required
                  className="w-full px-3 py-2 mt-1 focus:outline-none focus:border-blue-500 text-gray-800 text-sm bg-transparent border border-gray-300 rounded-md"
                />
              </div>

              <div className="mb-4 border-b border-gray-300">
                <label
                  htmlFor="email"
                  className="block text-gray-800 font-medium text-sm"
                >
                  <span className="text-red-500">*</span>Email
                </label>
                <input
                  type="email"
                  id="email"
                  value={email}
                  onChange={handleEmailChange}
                  placeholder="Enter email"
                  required
                  pattern="[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"
                  className="w-full px-3 py-2 mt-1 focus:outline-none focus:border-blue-500 text-gray-800 text-sm bg-transparent border border-gray-300 rounded-md"
                />
              </div>

              <div className="mb-4 border-b border-gray-300">
                <label
                  htmlFor="mobile"
                  className="block text-gray-800 font-medium text-sm"
                >
                  <span className="text-red-500">*</span>Mobile
                </label>
                <input
                  type="tel"
                  id="mobile"
                  value={mobile}
                  onChange={handleMobileChange}
                  placeholder="Enter mobile number"
                  required
                  className={`w-full px-3 py-2 mt-1 focus:outline-none focus:border-blue-500 text-gray-800 text-sm bg-transparent border ${
                    isMobileValid || mobile.length === 0
                      ? "border-gray-300"
                      : "border-red-500"
                  } rounded-md`}
                />
                {mobile.length > 0 && !isMobileValid && (
                  <p className="text-red-500 text-xs mt-1">
                    Please enter a 10-digit mobile number.
                  </p>
                )}
              </div>

              <div className="mb-4 border-b border-gray-300">
                <label
                  htmlFor="password"
                  className="block text-gray-800 font-medium text-sm"
                >
                  <span className="text-red-500">*</span>Password
                </label>
                <div className="relative">
                  <input
                    type={showPassword ? "text" : "password"}
                    id="password"
                    value={password}
                    onChange={handlePasswordChange}
                    placeholder="Enter password"
                    required
                    className="w-full px-3 py-2 mt-1 focus:outline-none focus:border-blue-500 text-gray-800 text-sm bg-transparent border border-gray-300 rounded-md pr-10"
                  />
                  <button
                    type="button"
                    onClick={toggleShowPassword}
                    className="absolute inset-y-0 right-0 flex items-center px-2 text-gray-800"
                  >
                    {showPassword ? <RiEyeOffFill /> : <RiEyeFill />}
                  </button>
                </div>
                {password && (
                  <div className="password-strength-feedback">
                    {!criteriaMet && password.length < 8 && (
                      <p style={{ color: "red" }}>
                        &#10007; Password must be at least 8 characters long.
                      </p>
                    )}
                    {!criteriaMet && !/[A-Z]/.test(password) && (
                      <p style={{ color: "red" }}>
                        &#10007; Include at least one uppercase letter.
                      </p>
                    )}
                    {!criteriaMet && !/\d/.test(password) && (
                      <p style={{ color: "red" }}>
                        &#10007; Include at least one number.
                      </p>
                    )}
                    {!criteriaMet &&
                      !/[$&+,:;=?@#|'<>.^*()%!-]/.test(password) && (
                        <p style={{ color: "red" }}>
                          &#10007; Include at least one symbol.
                        </p>
                      )}
                    {criteriaMet && (
                      <p style={{ color: "green" }}>&#10003; Strong Password.</p>
                    )}
                  </div>
                )}
              </div>

              <button
                type="submit"
                className="card-header text-white py-2 px-4 rounded-md transition-colors duration-300 bg-blue-500 hover:bg-blue-600 focus:outline-none focus:bg-blue-600"
              >
                Register
              </button>
            </motion.form>
          )}
          {message && <p className="text-gray-800">{message}</p>}
          <p className="text-center mt-3 text-gray-600">
            If you have an account, please <Link to="/Signin">Sign In Now</Link>
          </p>
        </div>
      </div>
    </div>
  );
};

export default Register;


import React, { useEffect, useState } from 'react';
import 'animate.css';
import { motion } from 'framer-motion';
import { message } from 'antd'; // Import message from antd for displaying messages
import api from '../../api'; // Import the axios instance

const Subscription = () => {
  const [userId, setUserId] = useState(null); // State to hold userId
  const [subscriptions, setSubscriptions] = useState([]);
  const [initialHolidays, setInitialHolidays] = useState({}); // State to hold initial holidays

  useEffect(() => {
    const userData = JSON.parse(localStorage.getItem('userData'));

    if (userData && userData.id) {
      setUserId(userData.id);
    } else {
      alert('User data not found in local storage');
    }
  }, []);

  useEffect(() => {
    if (!userId) return;

    const fetchSubscriptions = async () => {
      try {
        const response = await api.get(`/api/subscriptions/user/${userId}`);
        const sortedSubscriptions = response.data.sort((a, b) => b.id - a.id);
        const subscriptionsWithHolidays = sortedSubscriptions.map(subscription => {
          const holidays = JSON.parse(localStorage.getItem(`subscription_${subscription.id}_holidays`)) || [];
          return { ...subscription, holidays };
        });

        // Store initial holidays for each subscription
        const initialHolidays = {};
        subscriptionsWithHolidays.forEach(subscription => {
          initialHolidays[subscription.id] = [...subscription.holidays];
        });

        setSubscriptions(subscriptionsWithHolidays);
        setInitialHolidays(initialHolidays);
      } catch (error) {
        console.error('Error fetching subscriptions:', error);
      }
    };

    fetchSubscriptions();
  }, [userId]);

  const handleHolidayChange = (e, index) => {
    const holiday = e.target.value;
    const updatedSubscriptions = [...subscriptions];
    updatedSubscriptions[index].holidays.push(holiday);
    setSubscriptions(updatedSubscriptions);
    localStorage.setItem(`subscription_${subscriptions[index].id}_holidays`, JSON.stringify(updatedSubscriptions[index].holidays)); // Save holidays to localStorage
  };

  const addHoliday = async (subscriptionId, holidays) => {
    try {
      const initialHolidaysForSubscription = initialHolidays[subscriptionId] || [];
      const newHolidays = holidays.filter(holiday => !initialHolidaysForSubscription.includes(holiday));
      const numberOfHolidays = newHolidays.length;

      if (numberOfHolidays === 0) return; // No new holidays to add

      const response = await api.put(`/api/subscriptions/${subscriptionId}/add-holidays`, {
        holidays: newHolidays,
        numberOfHolidays: numberOfHolidays
      });
      console.log('Holiday added successfully:', response.data);

      // Update the subscription's end date in the local state
      const updatedSubscriptions = subscriptions.map(sub => {
        if (sub.id === subscriptionId) {
          const newEndDate = calculateEndDate(sub.startDate, sub.duration, holidays);
          return { ...sub, endDate: newEndDate };
        }
        return sub;
      });
      message.success("Subscription Holidays is Done");
      setTimeout(() => {
        window.location.reload();
      }, 500);
      setSubscriptions(updatedSubscriptions);
      localStorage.setItem(`subscriptions`, JSON.stringify(updatedSubscriptions));

      // Show success message and reload the page
    
    } catch (error) {
      console.error('Error adding holiday:', error);
    }
  };

  const calculateEndDate = (startDate, duration, holidays) => {
    const endDate = new Date(startDate);
    endDate.setDate(endDate.getDate() + duration);

    let totalHolidays = 0;
    holidays.forEach(holiday => {
      const holidayDate = new Date(holiday);
      if (holidayDate >= startDate && holidayDate <= endDate) {
        totalHolidays += 1;
      }
    });

    endDate.setDate(endDate.getDate() + totalHolidays);
    return endDate;
  };

  const formatDate = (date) => {
    return new Date(date).toLocaleDateString(undefined, {
      month: 'numeric',
      day: 'numeric',
      year: 'numeric',
    });
  };

  return (
    <div className="container mx-auto p-4" style={{ marginTop: '3cm' }}>
      <h1 className="text-3xl font-bold mb-6 text-center animate__animated animate__fadeInDown">Subscriptions</h1>
      <div className="flex flex-col">
        {subscriptions.map((subscription, index) => {
          const endDate = calculateEndDate(subscription.startDate, subscription.duration, subscription.holidays || []);
          return (
            <motion.div
              key={subscription.id}
              className={`bg-white shadow-md rounded-lg p-4 mx-4 my-4 flex flex-col sm:flex-row items-center justify-between animate__animated animate__fadeIn`}
              initial={{ opacity: 0, y: 50 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5, delay: index * 0.1 }}
              whileHover={{ scale: 1.05 }}
              style={{ border: '1px solid rgb(225,170,52)' }}
            >
              <div className="flex items-center mb-2 sm:mb-0" style={{ marginLeft: '0cm' }}>
                <img
                  src={subscription.img || "https://images.herzindagi.info/image/2023/Sep/flaxseeds-roti.jpg"}
                  alt="Subscription Image"
                  className="w-24 h-24 object-cover rounded-md mr-4"
                />
                <div style={{ marginLeft: '2cm' }}>
                  <p className="font-semibold text-center sm:text-left mb-2">Chapati</p>
                  <p className="text-center sm:text-left text-gray-600">{`Duration: ${subscription.duration} days`}</p>
                  <p className="text-center sm:text-left text-gray-600">{`Status: ${subscription.status} `}</p>
                </div>
              </div>
              <div className="text-center sm:text-right">
                <p>{`Start Date: ${subscription.startDate ? formatDate(subscription.startDate) : 'N/A'}`}</p>
                <p>{`End Date: ${endDate ? formatDate(endDate) : 'N/A'}`}</p>
                <p className="font-semibold">{`Price: ₹${subscription.price}`}</p>
                <div style={{ marginLeft: '1cm' }}>
                  <label htmlFor={`holiday-${index}`} className="mr-2 font-bold">Add Holiday:</label>
                  <input type="date" id={`holiday-${index}`} onChange={(e) => handleHolidayChange(e, index)} style={{ width: '5cm' }} />
                  <button onClick={() => addHoliday(subscription.id, subscription.holidays)} className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-1 px-3 rounded ml-1" style={{ height: '1cm', backgroundColor: 'rgb(210,152,57)' }}>Add</button>
                  <div className="mt-2">
                    <p>Selected Holidays:</p>
                    <ul>
                      {subscription.holidays && subscription.holidays.map((holiday, index) => (
                        <li key={index}>{formatDate(holiday)}</li>
                      ))}
                    </ul>
                  </div>
                </div>
              </div>
            </motion.div>
          );
        })}
        {subscriptions.length === 0 && (
          <div className="flex justify-center items-center h-full">
            <p className="text-center text-gray-500 animate__animated animate__fadeIn font-bold text-2xl p-4">
              No subscriptions found!!
            </p>
          </div>
        )}
      </div>
    </div>
  );
};

export default Subscription;



import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import { motion } from "framer-motion";
import axios from "axios";
import { useLocation } from 'react-router-dom';
import api from '../../api'; // Import the axios instance

const SubscriptionDetailsPage = () => {
  const [subscriptionSuccess, setSubscriptionSuccess] = useState(false);
  const [subscriptionType, setSubscriptionType] = useState("1 week");
  const [duration, setDuration] = useState(7);
  const [startDate, setStartDate] = useState(new Date());
  const [endDate, setEndDate] = useState(new Date());
  const [price, setPrice] = useState("");
  const [subscriptionDetails, setSubscriptionDetails] = useState({});
  const [userId, setUserId] = useState(""); // State to store userId
  const location = useLocation();
  const queryParams = new URLSearchParams(location.search);
  const subscriptionPlanId = queryParams.get('subscriptionPlanId');
  const productId = queryParams.get('productId');

  const productData = {
    id: 27,
    name: "Chapati",
    description: "Soft and fluffy Indian flatbread, perfect for pairing with your favorite curries or as a wrap for a quick meal.",
    image_url: "https://images.herzindagi.info/image/2023/Sep/flaxseeds-roti.jpg",
    price: 10
  };

  useEffect(() => {
    const userData = JSON.parse(localStorage.getItem('userData')); // Fetch userId from local storage
    if (userData && userData.id) {
      setUserId(userData.id); // Set userId in state
      fetchOrderHistory(userData.id); // Fetch order history using userId
    } else {
      alert('User data not found in local storage');
    }
  }, []);

  const fetchOrderHistory = async (userId) => {
    try {
      const response = await api.get(`/api/orders/${userId}`);
      // Handle response accordingly
    } catch (error) {
      console.error("Error fetching order history:", error);
    }
  };

  useEffect(() => {
    const calculateEndDate = () => {
      const endDate = new Date(startDate.getTime() + (duration * 24 * 60 * 60 * 1000));
      return endDate;
    };

    setEndDate(calculateEndDate());
  }, [startDate, duration]);

  const handleSubscriptionTypeSelect = (type) => {
    setSubscriptionType(type);
    switch (type) {
      case "1 week":
        setDuration(7);
        break;
      case "15 days":
        setDuration(15);
        break;
      case "1 month":
        setDuration(30);
        break;
      default:
        setDuration(0);
        break;
    }
  };

  const postData = async () => {
    try {
      const formData = new FormData();
      formData.append("userId", userId); // Include userId in the formData
      formData.append("productId", productId);
      formData.append("startDate", startDate.toISOString().slice(0, 10));
      formData.append("duration", subscriptionDetails?.id === 1 ? 7 : subscriptionDetails?.id === 2 ? 15 : subscriptionDetails?.id === 3 ? 30 : 'unknown');
      formData.append("status", subscriptionDetails?.status);
      formData.append("price", subscriptionDetails?.price);
      formData.append("subscriptionPlanId", subscriptionPlanId);
      formData.append("quantity", "5 Chapati");

      const response = await api.post("/api/subscriptions", formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      });
      console.log("Subscription data sent successfully:", response.data);
      setSubscriptionSuccess(true);
      setTimeout(() => {
        setSubscriptionSuccess(false);
      }, 3000);
    } catch (error) {
      console.error("Error sending subscription data:", error);
    }
  };

  const getData = async () => {
    const response = await api.get(`/api/plans/${subscriptionPlanId}`);
    setSubscriptionDetails(response.data);
  };

  useEffect(() => {
    getData();
  }, []);

  return (
    <div className="container mx-auto p-6 mt-16">
      <h1 className="text-3xl font-bold mb-6 text-center">Subscribe to {productData.name}</h1>
      <div className="md:flex md:items-center md:justify-between">
        <div className="md:w-1/2 mr-6 mb-6 md:mb-0">
          <div className="max-w-md mx-auto rounded-lg overflow-hidden shadow-lg">
            <img src={productData.image_url} alt={productData.name} className="w-full h-auto" />
            <div className="px-6 py-4">
              <div className="font-bold text-xl mb-2">{productData.name}</div>
              <p className="text-gray-700 text-base">{productData.description}</p>
            </div>
          </div>
        </div>
        <div className="md:w-1/2 max-w-md mx-auto">
          <div className="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">
            <div>
              <p className="text-xl font-bold mb-4">Subscription Details</p>
              <label htmlFor="start-date" className="mr-2 font-bold">Start Date:</label>
              <input type="date" id="start-date" value={startDate.toISOString().slice(0, 10)} onChange={(e) => setStartDate(new Date(e.target.value))} />
              <div>
                <p className="text-xl font-bold mb-4">Subscription Details</p>
                <p className="text-gray-700">Duration: {subscriptionDetails?.id === 1 ? 7 : subscriptionDetails?.id === 2 ? 15 : subscriptionDetails?.id === 3 ? 30 : 'unknown' } Days</p>
                <p className="text-gray-700">Status: {subscriptionDetails?.status}</p>
                <p className="text-gray-700">Price: {subscriptionDetails?.price}</p>
                <p className="text-gray-700">Quantity: 5 Chapati</p>
              </div>
            </div>
            <motion.button whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }} onClick={postData} className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded w-full mb-4">
              Subscribe
            </motion.button>
            {subscriptionSuccess && (
              <div className="bg-green-200 text-green-800 p-2 rounded text-center font-bold">
                Subscription Successful!
              </div>
            )}
            <Link
              to={{
                pathname: "/cart",
                search: `?discountedPrice=${productData.price * duration}&subscriptionType=${subscriptionType}&duration=${duration}`,
                state: { product: productData, subscription: subscriptionDetails }
              }}
              className="block mt-4 text-sm text-blue-500 hover:underline text-center font-bold"
            >
              Go To Cart
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SubscriptionDetailsPage;







  import React, { useState, useEffect } from "react";
  import axios from "axios";
  import { useLocation, Link, useNavigate } from "react-router-dom";
  import { ToastContainer, toast } from "react-toastify"; // Import ToastContainer and toast
  import "react-toastify/dist/ReactToastify.css";
  import api from "../api"; // Import the axios instance

  const OrderDetails = () => {
    const [order, setOrder] = useState(null);
    const location = useLocation();
    const queryParams = new URLSearchParams(location.search);
    const orderId = queryParams.get("id");
    const navigate = useNavigate();

    useEffect(() => {
      const fetchOrder = async () => {
        try {
          const response = await api.get(`/api/orders/summery/${orderId}`);
          setOrder(response.data);
          // Show toast message
          toast.info("You will be redirected to the home page in 10 seconds.", {
            position: toast.POSITION.TOP_CENTER,
          });

          // Redirect to home page after 10 seconds
          const redirectTimeout = setTimeout(() => {
            navigate("/");
          }, 10000);

          return () => clearTimeout(redirectTimeout); // Cleanup function to clear timeout
        } catch (error) {
          console.error("Error fetching order:", error);
        }
      };

      fetchOrder();
    }, [orderId, navigate]);

    const cancelOrder = async () => {
      try {
        await api.delete(`/api/orders/cancel/${orderId}`);
        alert("Order canceled successfully");
        navigate("/"); // Redirect to the home page after cancellation
      } catch (error) {
        console.error("Error canceling order:", error);
        alert("Failed to cancel order");
      }
    };

    return (
      <div className="container mx-auto mt-9 px-4" style={{ paddingTop: "3cm" }}>
        {order ? (
          <>
            <div className="bg-white shadow-md rounded-lg p-4 mb-6">
              <div className="flex flex-wrap justify-between items-center">
                <div className="flex flex-col mb-4" style={{ minWidth: "12rem" }}>
                  <p className="font-bold">Order ID:</p>
                  <p>{order.id}</p>
                </div>
                <div className="flex flex-col mb-4" style={{ minWidth: "12rem" }}>
                  <p className="font-bold">First Name:</p>
                  <p>{order.firstName}</p>
                </div>
                <div className="flex flex-col mb-4" style={{ minWidth: "12rem" }}>
                  <p className="font-bold">Last Name:</p>
                  <p>{order.lastName}</p>
                </div>
                <div className="flex flex-col mb-4" style={{ minWidth: "12rem" }}>
                  <p className="font-bold">Email:</p>
                  <p>{order.user.email}</p>
                </div>
                <div className="flex flex-col mb-4" style={{ minWidth: "12rem" }}>
                  <p className="font-bold">Mobile:</p>
                  <p>{order.user.mobile}</p>
                </div>
                <div className="flex flex-col mb-4" style={{ minWidth: "12rem" }}>
                  <p className="font-bold">Order Date:</p>
                  <p>{new Date(order.orderDate).toLocaleString()}</p>
                </div>
                <div className="flex flex-col mb-4" style={{ minWidth: "12rem" }}>
                  <p className="font-bold">Total Amount:</p>
                  <p>{order.totalAmount}</p>
                </div>
                <div className="flex flex-col mb-4" style={{ minWidth: "12rem" }}>
                  <p className="font-bold">Status:</p>
                  <p>{order.status}</p>
                </div>
              </div>
            </div>

            <div className="bg-white shadow-md rounded-lg p-4 mb-6">
              <p className="font-bold mb-4">Order Items:</p>
              <div>
                {order.orderItems.map((item) => (
                  <div
                    key={item.id}
                    className="flex flex-wrap items-center justify-between border-b border-gray-300 py-4"
                  >
                    {item.product.imageUrl && (
                      <img
                        src={`data:image/jpeg;base64,${item.product.imageUrl}`}
                        alt={item.product.name}
                        className="w-24 h-16 object-cover"
                      />
                    )}
                    <div className="flex flex-col ml-4 mb-4" style={{ flex: 1 }}>
                      <p className="font-bold">{item.product.name}</p>
                      <p>Price: {item.product.price}</p>
                      <p>Available: {item.product.available ? "Yes" : "No"}</p>
                    </div>
                    <Link
                      to="/"
                      className="text-white py-2 px-4 rounded-md mb-4"
                      style={{
                        backgroundColor: "rgb(148,103,0)",
                        color: "white",
                        textDecoration: "none",
                      }}
                    >
                      View More Products
                    </Link>
                    
                  </div>
                  
                  
                ))}
                <div className="flex justify-end mt-6">
                  <button
                    onClick={cancelOrder}
                    className="text-white py-2 px-4 rounded-md"
                    style={{
                      backgroundColor: "red",
                      color: "white",
                      textDecoration: "none",
                    }}
                  >
                    Cancel Order
                  </button>
                  </div>
                
              </div>
            </div>
          </>
        ) : (
          <p>Loading...</p>
        )}
        <ToastContainer />
      </div>
    );
  };

  export default OrderDetails;


import React, { useEffect, useState } from "react";
import { motion } from "framer-motion";
import api from "../api"; // Import the axios instance

const OrderHistory = () => {
  const [orders, setOrders] = useState([]);
  const [orderDetails, setOrderDetails] = useState({});

  useEffect(() => {
    const userData = JSON.parse(localStorage.getItem("userData"));

    if (userData && userData.id) {
      fetchOrderHistory(userData.id);
    } else {
      alert("User data not found in local storage");
    }
  }, []);

  const fetchOrderHistory = async (userId) => {
    try {
      const response = await api.get(`/api/orders/${userId}`);
      // Sort orders by orderDate in descending order
      const sortedOrders = response.data.sort(
        (a, b) => new Date(b.orderDate) - new Date(a.orderDate)
      );
      setOrders(sortedOrders);

      // Fetch details for each order
      sortedOrders.forEach((order) => {
        fetchOrderDetails(order.id);
      });
    } catch (error) {
      console.error("Error fetching order history:", error);
    }
  };

  const fetchOrderDetails = async (orderId) => {
    try {
      const response = await api.get(`/api/orders/summery/${orderId}`);
      setOrderDetails((prevDetails) => ({
        ...prevDetails,
        [orderId]: response.data,
      }));
    } catch (error) {
      console.error("Error fetching order details:", error);
    }
  };

  // Function to format date without time
  const formatDate = (date) => {
    return new Date(date).toLocaleDateString(undefined, {
      month: "numeric",
      day: "numeric",
      year: "numeric",
    });
  };

  useEffect(() => {
    console.log("Order Details:", orderDetails);
  }, [orderDetails]);

  return (
    <div className="container mx-auto p-4" style={{ marginTop: "3cm", marginLeft: "2cm", marginRight: "2cm" }}>
      <h1 className="text-3xl font-bold mb-6 text-center animate__animated animate__fadeInDown">
        Order History
      </h1>
      <div className="flex flex-wrap justify-center">
        {orders.length > 0 ? (
          orders.map((order) => (
            <motion.div
              key={order.id}
              className="bg-white shadow-md rounded-lg p-6 mx-6 my-4 w-full md:w-3/4 lg:w-1/2"
              initial={{ opacity: 0, y: 50 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5 }}
              whileHover={{ scale: 1.05 }}
              style={{ border: "1px solid rgb(225,170,52)" }} // Add border style
            >
              <div className="flex flex-col md:flex-row">
                <div className="w-full md:w-1/3 pr-4">
                  {order.orderItems.map((item) => (
                    <div key={item.product.id} className="mb-4">
                      <img
                        src={`data:image/jpeg;base64,${item.product.imageUrl}`}
                        alt={item.product.name}
                        className="w-full h-40 object-cover rounded-md mb-2"
                      />
                      <p className="font-semibold text-center mb-2">
                        {item.product.name}
                      </p>
                      <p className="text-center">{`Price: ${item.product.price
                          ? `₹${item.product.price.toLocaleString("en-IN")}`
                          : "Price not available"
                        }`}</p>
                    </div>
                  ))}
                </div>
                <div className="w-full md:w-2/3 flex flex-col space-y-4">
                  <div className="mb-2">
                    <p>
                      <strong>Order ID:</strong>
                      {` ${order.id}`}
                    </p>
                    <p>
                      <strong>Total Amount:</strong>
                      {` ${order.totalAmount
                          ? `₹${order.totalAmount.toLocaleString("en-IN")}`
                          : "N/A"
                        }`}
                    </p>
                    <p>
                      <strong>Status:</strong>
                      {` ${order.status}`}
                    </p>
                    <p>
                      <strong>Order Date:</strong>
                      {` ${order.orderDate ? formatDate(order.orderDate) : "N/A"
                        }`}
                    </p>
                  </div>
                  {orderDetails[order.id] && (
                    <div className="space-y-2">
                      <div className="flex items-start">
                        <p className="font-bold text-lg">Shipping Address:</p>
                        <p className="ram" style={{
                          listStyleType: "none",
                          margin: 1,
                          padding: 3,
                        }}>
                          {orderDetails[order.id].address}
                        </p>
                      </div>

                      <div className="flex">
                        <p className="font-bold text-lg wheatItem">Items:</p>
                        <ul
                          className="text-right"
                          style={{
                            listStyleType: "none",
                            margin: 1,
                            padding: 3,
                          }}
                        >
                          {orderDetails[order.id].orderItems.map((item) => (
                            <li key={item.id}>
                              {item.product.type === "SUBSCRIPTION" ? (
                                <span>Subscription </span>
                              ) : (
                                <span>
                                  {item.product.name} - {item.quantity}
                                </span>
                              )}
                            </li>
                          ))}
                        </ul>
                      </div>
                    </div>
                  )}
                </div>
              </div>
            </motion.div>
          ))
        ) : (
          <div className="flex justify-center items-center h-full">
            <p className="text-center text-gray-500 animate__animated animate__fadeIn font-bold text-2xl p-4">
              No orders found!!
            </p>
          </div>
        )}
      </div>
    </div>
  );
};

export default OrderHistory;





import React, { useState, useEffect } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import PhoneInput from "react-phone-input-2";
import "react-phone-input-2/lib/style.css";
import { RecaptchaVerifier, signInWithPhoneNumber } from "firebase/auth";
import { toast, Toaster } from "react-hot-toast";
import { auth } from "../firebase.config";
import OtpInput from "otp-input-react";
import { CgSpinner } from "react-icons/cg";
import { BsFillShieldLockFill } from "react-icons/bs";
import Logo from "././assets/Logo.jpg";
import { useSelector } from 'react-redux';
import { Link } from "react-router-dom";

const PhoneSignin = ({ setAuthenticated, setUserData }) => {
  const [otp, setOtp] = useState("");
  const [ph, setPh] = useState("");
  const [loading, setLoading] = useState(false);
  const [showOTP, setShowOTP] = useState(false);
  const [user, setUser] = useState(null);
  const navigate = useNavigate();
  const state = useSelector((state) => state.handleCart); // Get cart state

  // Function to verify CAPTCHA
  function onCaptchVerify() {
    if (!window.recaptchaVerifier) {
      window.recaptchaVerifier = new RecaptchaVerifier(
        "recaptcha-container",
        {
          size: "invisible",
          callback: (response) => {
            onSignup();
          },
          "expired-callback": () => {},
        },
        auth
      );
    }
  }

  // Function to sign up with phone number
  function onSignup() {
    setLoading(true);
    onCaptchVerify();

    const appVerifier = window.recaptchaVerifier;

    const formatPh = "+" + ph;

    signInWithPhoneNumber(auth, formatPh, appVerifier)
      .then((confirmationResult) => {
        window.confirmationResult = confirmationResult;
        setLoading(false);
        setShowOTP(true);
        toast.success("OTP sent successfully!");
      })
      .catch((error) => {
        console.log(error);
        setLoading(false);
      });
  }

  // Function to verify OTP
  function onOTPVerify() {
    setLoading(true);
    window.confirmationResult
      .confirm(otp)
      .then(async (res) => {
        setUser(res.user);
        setAuthenticated(true); // Authenticate user
        setLoading(false);
        // Store token in localStorage upon successful login
        const token = "exampleToken"; // Replace this with your actual token
        localStorage.setItem("token", token);
        console.log("Token:::::::::", token);
      })
      .catch((err) => {
        console.log(err);
        setLoading(false);
      });
  }

  // Function to handle OTP input change
  const handleOTPChange = (otp) => {
    setOtp(otp);
  };

  useEffect(() => {
    // Check if token exists in localStorage on page load
    const token = localStorage.getItem("token");
    if (token) {
      // Set timer to clear token after 10 seconds
      const expirationTimer = setTimeout(() => {
        localStorage.removeItem("token");
        setAuthenticated(false);
        setUser(null);
      }, 10000);
      return () => clearTimeout(expirationTimer);
    }
  }, [setAuthenticated]);

  return (
    <div className="min-h-screen flex justify-center items-center">
      <div className="pt-20 w-full max-w-md">
        <Toaster toastOptions={{ duration: 4000 }} />
        <div id="recaptcha-container"></div>
        {user ? (
          <h2 className="text-center text-gray-900 font-medium text-2xl">
            👍 Login Success
          </h2>
        ) : (
          <div className="w-full flex flex-col gap-4 rounded-lg p-4 bg-white shadow-lg">
            {showOTP ? (
              <>
                <div className="bg-green-500 text-white w-fit mx-auto p-4 rounded-full">
                  <BsFillShieldLockFill size={30} />
                </div>
                <label
                  htmlFor="otp"
                  className="font-bold text-xl text-green-500 text-center"
                >
                  Enter your OTP
                </label>
                <OtpInput
                  value={otp}
                  onChange={handleOTPChange}
                  OTPLength={6}
                  otpType="number"
                  disabled={false}
                  autoFocus
                  className="opt-container"
                />
                <button
                  onClick={onOTPVerify}
                  className="bg-green-600 w-full flex gap-1 items-center justify-center py-2.5 text-white rounded hover:bg-green-700 transition duration-300 ease-in-out"
                >
                  {loading && (
                    <CgSpinner size={20} className="mt-1 animate-spin" />
                  )}
                  <span>Verify OTP</span>
                </button>
              </>
            ) : (
              <>
                <div className="flex justify-between items-center">
                  <h1 className="text-left leading-normal text-green-500 font-medium text-3xl mb-6">
                    <span>Login to</span> <br />
                    Wheatpantry
                    <br />
                  </h1>
                  <div className="flex justify-between items-center">
                    <img src={Logo} alt="Logo" style={{ width: '80px', height: 'auto' }} />
                  </div>
                </div>
                <label
                  htmlFor=""
                  className="font-bold text-xl text-green-500 text-center"
                >
                  {/* Verify your phone number */}
                </label>
                <PhoneInput country={"in"} value={ph} onChange={setPh} />
                <button
                  onClick={onSignup}
                  className="bg-green-600 w-full flex gap-1 items-center justify-center py-2.5 text-white rounded hover:bg-green-700 transition duration-300 ease-in-out"
                  style={{ backgroundColor: "rgb(148,103,0)" }}
                >
                  {loading && (
                    <CgSpinner size={20} className="mt-1 animate-spin" />
                  )}
                  <span>Send code via SMS</span>
                </button>
                <div className="text-center text-green-500 mt-2">
                  <span>or </span>
                  <Link to="/Register" className="text-green-500 font-semibold hover:underline">create an account</Link>
                </div>
              </>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default PhoneSignin;




import React, { useEffect, useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import axios from "axios";

const Appp = ({ setAuthenticated }) => {
    const searchParams = new URLSearchParams(window.location.search);
    const accessToken = searchParams.get('access_token');
    const [userDetails, setUserDetails] = useState({
        countryCode: "",
        phoneNo: "",
        phEmailJwt: ""
    });
    const [token, setToken] = useState("");
    const [message, setMessage] = useState("");
    const [isValidUser, setIsValidUser] = useState(false);
    const [userData, setUserData] = useState(null);
    const navigate = useNavigate();

    const CLIENT_ID = "18162157016561076763";
    const REDIRECT_URL = window.location.href;
    const AUTH_URL = `https://www.phone.email/auth/log-in?client_id=${CLIENT_ID}&redirect_url=${REDIRECT_URL}`;

    const httpRequest = async () => {
        try {
            const url = "https://eapi.phone.email/getuser";
            const data = new FormData();
            data.append("access_token", accessToken);
            data.append("client_id", CLIENT_ID);

            const response = await fetch(url, { method: "POST", body: data });

            if (!response.ok) {
                throw new Error("Network response was not ok");
            }

            const responseData = await response.json();

            if (responseData.status !== 200) {
                throw new Error("Something went wrong");
            }

            const phEmailJwt = responseData.ph_email_jwt;

            setUserDetails({
                countryCode: responseData.country_code,
                phoneNo: responseData.phone_no,
                phEmailJwt: phEmailJwt
            });

            const cookieExpire = new Date(Date.now() + 180 * 24 * 60 * 60 * 1000).toUTCString();
            document.cookie = `ph_email_jwt=${phEmailJwt}; expires=${cookieExpire}; path=/`;

            setToken(phEmailJwt);
            localStorage.setItem("token", phEmailJwt);

            // Store user details in local storage
            localStorage.setItem("userData", JSON.stringify(responseData));

            // Set userData state
            setUserData(responseData);

            navigate("/Products");
            window.location.reload();

        } catch (error) {
            console.error("Fetch error:", error);
        }
    };

    useEffect(() => {
        const storedToken = localStorage.getItem("token");
        if (storedToken) {
            setAuthenticated(true);
            setToken(storedToken);
            navigate("/Products");
        } else {
            setAuthenticated(false);
            navigate("/Appp");
        }
    }, []);

    useEffect(() => {
        if (accessToken) {
            httpRequest();
        }
    }, [accessToken]);

    useEffect(() => {
        if (userDetails.phoneNo) {
            fetchData(); // Call fetchData when userDetails.phoneNo is available
        }
    }, [userDetails.phoneNo]); // Add userDetails.phoneNo as a dependency

    const fetchData = async () => {
        try {
            const response = await axios.get(`http://localhost:8080/api/users/all?phoneNo=${userDetails.phoneNo}`);
            const userData = response.data;
            
            // Extracting username and email from the userData
            const { username, email } = userData;
            
            // Save username and email in local storage
            localStorage.setItem("userData", JSON.stringify({ username, email }));
            
            // Update state with fetched username and email
            setUserData({ username, email });
        } catch (error) {
            console.error("Error fetching data:", error);
        }
    };
    
    
    
    

    return (
        <>
          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', margin: '120px 30px' }}>
              <div style={{ color: '#024430 !important', textAlign: 'center', backgroundColor: '#fff', padding: '30px', borderRadius: '0.5rem', boxShadow: '0 1px 3px rgba(17, 24, 39, .09)', width: '100%', maxWidth: '420px', margin: '0 auto', fontFamily: 'sans-serif, serif, system-ui, -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Open Sans\', \'Helvetica Neue\', sans-serif', lineHeight: '28px', display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center' }}>
                  <img className="phe-login-img" width="250px" src="https://storage.googleapis.com/prod-phoneemail-prof-images/phem-widgets/phe-signin-box.svg"
                      alt="phone email login demo" />
                  <h1 style={{ margin: "10px" }}>Sign In</h1>
                  <p style={{ color: "#a6a6a6" }}>Welcome to Sign In with Wheatpantry</p>
                  <button
                      style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', padding: '14px 20px', backgroundColor: '#02BD7E', fontWeight: 'bold', color: '#ffffff', border: 'none', borderRadius: '3px', fontSize: 'inherit', cursor: 'pointer', maxWidth: '320px', width: '100%' }}
                      id="btn_ph_login"
                      name="btn_ph_login"
                      type="button"
                      onClick={() => window.open(AUTH_URL, 'peLoginWindow', 'toolbar=0,scrollbars=0,location=0,statusbar=0,menubar=0,resizable=0, width=500, height=560, top=' + (window.screen.height - 600) / 2 + ', left=' + (window.screen.width - 500) / 2)}>
                      <img src="https://storage.googleapis.com/prod-phoneemail-prof-images/phem-widgets/phem-phone.svg"
                          alt="phone email" style={{ marginRight: "10px" }} />
                      Sign In
                  </button>
                  <div className="text-center text-green-500 mt-2">
                      <span>or </span>
                      <Link to="/Register" className="text-green-500 font-semibold hover:underline">create an account</Link>
                  </div>
              </div>
          </div>
          {userData && (
              <div>
                   <h2>User Data:</h2>
        <p>Country Code: {userData.countryCode}</p>
        <p>Phone Number: {userData.phoneNo}</p>
        <p>JWT: {userData.phEmailJwt}</p>
        <p>Username: {userData.username}</p>
        <p>Email: {userData.email}</p>
              </div>
          )}
        </>
    );
};

export default Appp;


import React from "react";
import "./PagesStyle.css";

const Profile = () => {
  // Retrieve user data from localStorage
  const userDataLocalStorage = JSON.parse(localStorage.getItem("userData"));

  // Combine userData from both sources
  const userData = { ...userDataLocalStorage };

  return (
    <div className="min-h-screen flex justify-center items-center py-8 bgimg" style={{ paddingTop: '2.5cm' }}>
      <div className="p-8 rounded-lg shadow-lg max-w-md w-full">
        <h2 className="text-2xl mb-4 font-bold">My Profile</h2>
        <form className="space-y-4">
          <div>
            <label htmlFor="firstName" className="block text-gray-700 font-bold">
              First Name:
            </label>
            <input
              id="firstName"
              type="text"
              value={userData?.username || ""}
              readOnly
              className="border-none border-gray-300 rounded-md px-3 py-2 w-full"
            />
          </div>

          <div>
            <label htmlFor="email" className="block text-gray-700 font-bold">
              Email:
            </label>
            <input
              id="email"
              type="email"
              value={userData?.email || ""}
              readOnly
              className="border-none border-gray-300 rounded-md px-3 py-2 w-full"
            />
          </div>

          <div>
            <label htmlFor="mobile" className="block text-gray-700 font-bold">
              Mobile Number:
            </label>
            <input
              id="mobile"
              type="tel"
              value={userData?.mobile || ""}
              readOnly
              className="border-none border-gray-300 rounded-md px-3 py-2 w-full"
            />
          </div>

          {/* <div>
            <label htmlFor="address" className="block text-gray-700 font-bold">
              Address:
            </label>
            <input
              id="address"
              type="text"
              value={userData?.address || ""}
              readOnly
              className="border-none border-gray-300 rounded-md px-3 py-2 w-full"
            />
          </div> */}
        </form>
      </div>
    </div>
  );
};

export default Profile;



import React from 'react';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faSignOutAlt } from '@fortawesome/free-solid-svg-icons';
import { removeToken } from "../../tokenUtils";

const LogoutButton = () => {
    const handleLogout = () => {
        // Clear all items from local storage
        localStorage.clear();
        sessionStorage.clear();
        removeToken();

        window.location.href = '/';
    };

    return (
    
            <button onClick={handleLogout} style={{ fontWeight: '' }}>
                <FontAwesomeIcon icon={faSignOutAlt} style={{ marginRight: '5px' }} />
                Logout
            </button>
        
    );
};

export default LogoutButton;




import React, { useState, useEffect, useRef } from "react";
import { Link } from "react-router-dom";
import { motion } from "framer-motion";
import ShoppingCartIcon from "@mui/icons-material/ShoppingCart";
import CallIcon from "@mui/icons-material/Call";
import AccountCircleIcon from "@mui/icons-material/AccountCircle";
import Logo from "../assets/Logo.jpg";
import LogoutButton from "../Pages/LogoutButton";
import { FaSignInAlt } from 'react-icons/fa';
import { useSelector } from 'react-redux';

const useOutsideClick = (ref, handler) => {
  useEffect(() => {
    const listener = (event) => {
      if (!ref.current || ref.current.contains(event.target)) {
        return;
      }
      handler(event);
    };

    document.addEventListener("mousedown", listener);
    document.addEventListener("touchstart", listener);

    return () => {
      document.removeEventListener("mousedown", listener);
      document.removeEventListener("touchstart", listener);
    };
  }, [ref, handler]);
};

const Navbar = ({ authenticated }) => {
  const [cartItemCount, setCartItemCount] = useState(0);
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const state = useSelector((state) => state.handleCart);
  const menuRef = useRef(null);

  useEffect(() => {
    // Retrieve cart data from session storage when component mounts
    const savedCart = sessionStorage.getItem("cart");
    if (savedCart) {
      const cart = JSON.parse(savedCart);
      // Calculate total items in the cart
      const totalCount = cart.reduce((total, item) => total + item.qty, 0);
      setCartItemCount(totalCount);
    }
  }, []);

  useEffect(() => {
    const handleScroll = () => {
      if (isMenuOpen) {
        setIsMenuOpen(false);
        setIsDropdownOpen(false);
      }
    };

    window.addEventListener("scroll", handleScroll);
    

    return () => {
      window.removeEventListener("scroll", handleScroll);
    };
  }, [isMenuOpen]);

  useOutsideClick(menuRef, () => {
    if (isMenuOpen) {
      setIsMenuOpen(false);
      setIsDropdownOpen(false);
    }
  });

  const toggleMenu = () => {
    setIsMenuOpen(!isMenuOpen);
  };

  const toggleDropdown = () => {
    setIsDropdownOpen(!isDropdownOpen);
  };

  const closeDropdown = () => {
    setIsDropdownOpen(false);
  };

  const closeMenu = () => {
    setIsMenuOpen(false);
    setIsDropdownOpen(false); // Close dropdown when menu is closed
  };

  return (
    <header className="bg-white shadow-lg fixed top-0 left-0 right-0 z-10">
      <div className="container mx-auto px-4 py-3 flex justify-between items-center">
        <div className="flex items-center justify-center sm:justify-start">
          <Link to="/">
            <img src={Logo} alt="Logo" style={{ width: '80px', height: 'auto' }} />
          </Link>
        </div>

        <div className="flex items-center">
          <nav className="hidden md:flex space-x-4">
            <Link to="/Cart" className="btn btn-outline me-2 border-0" type="button">
              <ShoppingCartIcon />
              Cart ({cartItemCount})
            </Link>
            <Link to="/contact" className="flex items-center space-x-2">
              <CallIcon />
              <span>Contact</span>
            </Link>

            {authenticated ? (
              <>
                <div className="relative mt-2">
                  <div className="flex items-center space-x-2 cursor-pointer" onClick={toggleDropdown}>
                    <AccountCircleIcon />
                    <span>My Account</span>
                  </div>

                  {isDropdownOpen && (
                    <div className="absolute right-0 top-full mt-1 left-0 w-48 bg-white rounded-md shadow-lg py-1">
                      <Link
                        to="/profile"
                        className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center space-x-2"
                        onClick={() => setIsDropdownOpen(false)}
                      >
                        <AccountCircleIcon />
                        <span>Profile</span>
                      </Link><hr style={{ border: '0.5px solid lightgray', margin: '0rem 0' }} />
                      <Link
                        to="/orderHistory"
                        className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center space-x-2"
                        onClick={() => setIsDropdownOpen(false)}
                      >
                        <ShoppingCartIcon />
                        <span>Order History</span>
                      </Link><hr style={{ border: '0.5px solid lightgray', margin: '0rem 0' }} />

                      <Link to="/Subscribe" className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center space-x-2" onClick={closeMenu}>
                        <ShoppingCartIcon />
                        <span>Subscribe</span>
                      </Link>
                    </div>
                  )}
                </div>

                <div className="mt-2">
                  <LogoutButton onClick={closeMenu} />
                </div>
              </>
            ) : (
              <>
                <Link to="/register" className="flex items-center space-x-2" onClick={closeMenu}>
                  <AccountCircleIcon />
                  <span>Register</span>
                </Link>
                <Link to="/SignIN" className="flex items-center space-x-2" onClick={closeMenu}>
                  <FaSignInAlt />
                  <span>SignIn</span>
                </Link>
              </>
            )}
          </nav>
          <div className="md:hidden">
            <button
              onClick={toggleMenu}
              className="text-gray-800 focus:outline-none"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-6 w-6"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M4 6h16M4 12h16M4 18h16"
                />
              </svg>
            </button>
          </div>
        </div>
      </div>
      {isMenuOpen && (
        <motion.div
          initial={{ height: 0 }}
          animate={{ height: "auto" }}
          transition={{ duration: 0.3 }}
          className="md:hidden bg-gray-100"
          ref={menuRef} // Ref added to detect clicks outside of the menu
        >
          <nav className="px-4 py-2">
            <Link
              to="/Cart"
              onClick={closeMenu}
              className="block text-gray-800 py-2 border-b border-gray-300"
            >
              <ShoppingCartIcon />
              <span>Cart</span>
            </Link>
            <Link
              to="/contact"
              onClick={closeMenu}
              className="block text-gray-800 py-2 border-b border-gray-300"
            >
              <CallIcon />
              <span>Contact</span>
            </Link>
            {authenticated ? (
              <>
                <div className="relative mt-2">
                  <div className="flex items-center space-x-2 cursor-pointer" onClick={toggleDropdown}>
                    <AccountCircleIcon />
                    <span>My Account</span>
                  </div>

                  {isDropdownOpen && (
                    <div className="absolute right-0 top-full mt-1 left-0 w-48 bg-white rounded-md shadow-lg py-1">
                      <Link to="/profile" className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center space-x-2" onClick={closeMenu}>
                        <AccountCircleIcon />
                        <span>Profile</span>
                      </Link><hr style={{ border: '0.5px solid lightgray', margin: '0rem 0' }} />
                      <Link to="/orderHistory" className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center space-x-2" onClick={closeMenu}>
                        <ShoppingCartIcon />
                        <span>Order History</span>
                      </Link><hr style={{ border: '0.5px solid lightgray', margin: '0rem 0' }} />

                      <Link to="/Subscribe" className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center space-x-2" onClick={closeMenu}>
                        <ShoppingCartIcon />
                        <span>Subscribe</span>
                      </Link>
                    </div>
                  )}<hr className="my-2" />
                </div>
                <div style={{ marginLeft: '0.1cm' }}>
                <LogoutButton onClick={closeMenu} />
                </div>

              </>
            ) : (
              <>
                <Link
                  to="/register"
                  onClick={closeMenu}
                  className="block text-gray-800 py-2 border-b border-gray-300"
                >
                  <AccountCircleIcon />
                  <span>Register</span>
                </Link>
                <Link
                  to="/SignIN"
                  onClick={closeMenu}
                  className="block text-gray-800 py-2 border-b border-gray-300"
                >
                  <AccountCircleIcon />
                  <span>SignIN</span>
                </Link>
              </>
            )}
          </nav>
        </motion.div>
      )}
    </header>
  );
};

export default Navbar;

             
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


ADMIN

import React, { useState, useEffect } from "react";
import {
  BsFillArchiveFill,
  BsFillGrid3X3GapFill,
  BsPeopleFill,
  BsGraphUp,
} from "react-icons/bs";
import {
  BarChart,
  CartesianGrid,
  XAxis,
  YAxis,
  Tooltip,
  Legend,
  Bar,
} from "recharts";

const dataBarChart = [
  { name: "Category A", pv: 2400, uv: 1000 },
  { name: "Category B", pv: 1398, uv: 2000 },
];

const AdminDashboard = () => {
  const [userCount, setUserCount] = useState(0);
  const [totalSales, setTotalSales] = useState(0);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const userCountResponse = await fetch(
          "http://localhost:8080/api/users/count",
          {
            method: "GET",
            headers: {
              "Cache-Control": "no-cache",
              Pragma: "no-cache",
              Expires: "0",
            },
          }
        );
        if (!userCountResponse.ok) {
          throw new Error(
            `User count API error: ${userCountResponse.statusText}`
          );
        }
        const userCountData = await userCountResponse.json();
        console.log("User Count Data:", userCountData);
        setUserCount(userCountData);

        const totalSalesResponse = await fetch(
          "http://localhost:8080/api/orders/total-sale",
          {
            method: "GET",
            headers: {
              "Cache-Control": "no-cache",
              Pragma: "no-cache",
              Expires: "0",
            },
          }
        );
        if (!totalSalesResponse.ok) {
          throw new Error(
            `Total sales API error: ${totalSalesResponse.statusText}`
          );
        }
        const totalSalesData = await totalSalesResponse.json();
        console.log("Total Sales Data:", totalSalesData);
        setTotalSales(totalSalesData);
      } catch (error) {
        console.error("Error fetching data:", error);
      }
    };

    fetchData();
  }, []);

  return (
    <div className="main">
      <div className="main-title">
        <h3>ADMIN DASHBOARD</h3>
      </div>

      <div className="main-cards">
        <div className="card">
          <div className="card-inner">
            <h3>PRODUCTS</h3>
            <BsFillArchiveFill className="card_icon" />
          </div>
        </div>
        <div className="card">
          <div className="card-inner">
            <h3>CATEGORIES</h3>
            <BsFillGrid3X3GapFill className="card_icon" />
          </div>
        </div>
        <div className="card">
          <div className="card-inner">
            {/* <h3>USERS</h3> */}
            <BsPeopleFill className="card_icon" />
            <p>Total Users: {userCount}</p>
          </div>
        </div>
        <div className="card">
          <div className="card-inner">
            {/* <h3>TOTAL SALES</h3> */}
            <div className="total-sales-container">
              <BsGraphUp className="card_icon total-sales-icon" />
              <p className="total-sales-text">Total Sales: {totalSales}</p>
            </div>
          </div>
        </div>
      </div>

      {/* <div className="chart-container">
        <div className="bar-chart">
          <BarChart width={760} height={250} data={dataBarChart}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="name" />
            <YAxis />
            <Tooltip />
            <Legend />
            <Bar dataKey="pv" fill="#8884d8" />
            <Bar dataKey="uv" fill="#82ca9d" />
          </BarChart>
        </div>
      </div> */}
    </div>
  );
};

export default AdminDashboard;


/* Sidee css */
.Sideee{
  padding-top: 108px;
  /* height: 100vh; */
}
.ant-layout-sider {
 position: fixed;
}

/* AdminDashbaord cards */

.main-container {
grid-area: main;
overflow-y: auto;
padding: 20px 20px;
background-color: #f4f3ef;
display: flex;
flex-direction: column;
align-items: center; 
}

.main-title {
color: #1d2634;
font-weight: bold;
margin-bottom: 20px;
}

.main-cards {
display: grid;
grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
gap: 20px;
margin: 15px 0;
width: 100%;
}

.card {
display: flex;
flex-direction: column;
justify-content: space-around;
padding: 20px;
border-radius: 5px;
background-color: #fff; 
box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); 
}

.forcolz {
background-color: #946700;
color: white;
}

.card-inner {
display: flex;
align-items: center;
justify-content: space-between;
}

.card-inner > .card_icon {
font-size: 25px;
}

.charts {
display: grid;
grid-template-columns: 1fr;
gap: 20px;
margin-top: 60px;
height: 300px;
}
.ant-menu{
padding-top: 95px;
}
.ant-layout{
margin-top: 45px;
}
.forbold{
font-weight: bold;
}
.forbold span{
font-weight: bold;
}

.total-sales-container {
  display: flex;
  align-items: center; /* Center align items vertically */
}

.total-sales-icon {
  font-size: 24px; /* Adjust the size of the icon as per your preference */
  margin-right: 8px; /* Add some spacing between the icon and the text */
}
.card {
  /* Your card styles here */
}

.card-inner {
  /* Your card inner styles here */
}

.total-sales-container {
  display: flex;
  align-items: center;
}

.total-sales-icon {
  font-size: 24px;
  margin-right: 8px;
}

.total-sales-text {
  /* Adjust text size and other styles as needed */
}

/* Media query for mobile devices */
@media only screen and (max-width: 600px) {
  .card {
    width: 90%; /* Adjust width as needed */
    margin: 0 auto; /* Center the card horizontally */
  }

  .total-sales-container {
    flex-wrap: wrap; /* Allow content to wrap on smaller screens */
  }

  .total-sales-icon {
    margin-bottom: 8px; /* Add some space between icon and text on smaller screens */
  }

  .total-sales-text {
    flex: 1; /* Allow text to take up remaining space */
  }
}




@media screen and (min-width: 320px) and (max-width: 500px) {
/* Dashboard cards */
.main-cards {
 grid-template-columns: 1fr;
}

.card {
 padding: 20px 10px;
}
.table-container {
 overflow-x: auto;
}
.chart-container {
 width: 100%;
 overflow-x: auto;
}

.bar-chart {
 overflow-x: auto;
}
}
@media screen and (min-width: 500px) and (max-width: 700px) {
.main-cards {
 grid-template-columns: repeat(2, 1fr);
}
.table-container {
 overflow-x: auto;
}
.chart-container {
 width: 100%;
 overflow-x: auto;
}

.bar-chart {
 overflow-x: auto;
}
}
@media screen and (min-width: 700px) and (max-width: 900px) {
.main-cards {
 grid-template-columns: repeat(2, 1fr);
 gap: 15px;
}

.card {
 padding: 30px 20px;
}
.table-container {
 overflow-x: auto;
}
.chart-container {
 width: 100%;
 overflow-x: auto;
}

.bar-chart {
 overflow-x: auto;
}
}


@media screen and (min-width: 768px) {
.charts {
 grid-template-columns: 1fr 1fr; 
}
.table-container {
 overflow-x: auto;
}
.chart-container {
 width: 100%;
 overflow-x: auto;
}

.bar-chart {
 overflow-x: auto;
}
}







import { Card, Button } from "@mui/material";
import React, { useEffect, useState } from "react";
import ShoppingCartIcon from "@mui/icons-material/ShoppingCart";
import { useDispatch } from "react-redux";
import { addCart } from "../redux/action/index";
import DeleteIcon from "@mui/icons-material/Delete";
import "../Admin/Adminn.css";
import EditIcon from "@mui/icons-material/Edit";
import { Modal, Form, Input, Upload, Image, Radio, Select } from "antd";
import axios from "axios";
import { PlusOutlined } from "@ant-design/icons";
import api from "../api"; // Import the axios instance
import { notification } from 'antd';

const { Option } = Select;

const getBase64 = (file) =>
  new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => resolve(reader.result);
    reader.onerror = (error) => reject(error);
  });

const AdminProduct = () => {
  const [openSidebarToggle, setOpenSidebarToggle] = useState(false);
  const [data, setData] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingProduct, setEditingProduct] = useState(null);
  const dispatch = useDispatch();
  const [form] = Form.useForm();
  const [value, setValue] = useState(1);
  const [previewOpen, setPreviewOpen] = useState(false);
  const [previewImage, setPreviewImage] = useState("");
  const [fileList, setFileList] = useState([]);
  const [showImage, setShowImage] = useState(false);
  const [subscriptionPlan, setSubscriptionPlan] = useState(null);

  const TypeChange = (e) => {
    setValue(e.target.value);
    if (e.target.value === 1) {
      setSubscriptionPlan(null);
    }
  };

  const onSubscriptionPlanChange = (value) => {
    setSubscriptionPlan(value);
  };

  const onChange = (e) => {
    setValue(e.target.value);
  };

  const handlePreview = async (file) => {
    if (!file.url && !file.preview) {
      file.preview = await getBase64(file.originFileObj);
    }
    setPreviewImage(file.url || file.preview);
    setPreviewOpen(true);
  };

  const handleChange = ({ fileList: newFileList }) => setFileList(newFileList);

  const uploadButton = (
    <button
      style={{
        border: 0,
        background: "none",
      }}
      type="button"
    >
      <PlusOutlined />
      <div
        style={{
          marginTop: 8,
        }}
      >
        Upload
      </div>
    </button>
  );

  const OpenSidebar = () => {
    setOpenSidebarToggle(!openSidebarToggle);
  };

  const fetchData = async () => {
    try {
      const response = await api.get("/api/products");
      setData(response.data);

      if (response.data.length > 0 && response.data[0].imageUrl) {
        setShowImage(response.data[0].imageUrl);
      }
    } catch (error) {
      console.error("Error fetching data:", error.message);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  const addToCart = (product) => {
    dispatch(addCart(product));
  };

  const handleAddProduct = () => {
    setEditingProduct(null);
    setIsModalOpen(true);
    form.resetFields();
  };

  const handleEditProduct = (product) => {
    setEditingProduct(product);
    setIsModalOpen(true);

    form.setFieldsValue({
      upload: product.imageUrl,
      name: product.name,
      description: product.description,
      stock: product.stock,
      price: product.price,
      category: product.category,
      available: product.available === "Yes" ? 1 : 0,
      type: product.type === "NORMAL" ? 1 : 2,
      subscriptionPlanId: product.subscriptionPlanId || null,
    });
    setFileList([]);
    setValue(product.type === "NORMAL" ? 1 : 2);
    setSubscriptionPlan(product.subscriptionPlanId || null);
  };

  const handleOk = () => {
    setIsModalOpen(false);
  };

  const handleCancel = () => {
    setIsModalOpen(false);
  };

  const handleRemoveProduct = async (productId) => {
    try {
      await api.delete(`/api/products/${productId}`);
      fetchData();
    } catch (error) {
      console.error("Error deleting product:", error);
    }
  };

  const onFinish = async () => {
    try {
      const values = await form.validateFields();
      const formData = new FormData();
      formData.append("name", values.name);
      formData.append("description", values.description);
      formData.append("available", values.available === 1 ? "Yes" : "No");
      formData.append("price", values.price);
      formData.append("category", values.category);
      formData.append("image", fileList[0]?.originFileObj);
      formData.append("type", value === 1 ? "NORMAL" : "SUBSCRIPTION");

      if (value === 2) {
        formData.append("subscriptionPlanId", subscriptionPlan);
      }

      if (editingProduct) {
        await api.put(`/api/products/update/${editingProduct.id}`, formData, {
          headers: {
            "Content-Type": "multipart/form-data",
          },
        });
      } else {
        await api.post("/api/products/add", formData, {
          headers: {
            "Content-Type": "multipart/form-data",
          },
        });
      }
      const message = editingProduct ? 'Product Updated Successfully' : 'Product Added Successfully';
      const description = editingProduct ? 'The product has been updated successfully.' : 'The new product has been added successfully.';
      notification.success({
        message: message,
        description: description,
      });

      fetchData();
      setIsModalOpen(false);
    } catch (error) {
      console.error("Error adding/updating product:", error);
    }
  };

  const layout = {
    labelCol: {
      span: 8,
    },
    wrapperCol: {
      span: 15,
    },
  };

  return (
    <div className="product-page">
      <div className="content">
        <div>
          <button
            onClick={handleAddProduct}
            type="button"
            className="btn btn-primary"
          >
            Add New Product
          </button>
        </div>

        <div className="Product-container">
          {Array.isArray(data) &&
            data.map((productData, index) => (
              <div key={index} className="product-item">
                <Card className="card newcard">
                  <div style={{ position: "relative" }}>
                    <DeleteIcon
                      style={{
                        position: "absolute",
                        bottom: "-4px",
                        left: "240px",
                        cursor: "pointer",
                      }}
                      onClick={() => handleRemoveProduct(productData.id)}
                    />
                  </div>
                  <div className="image-container">
                    <img
                      src={`data:image/jpg;base64,${productData.imageUrl}`}
                      alt={productData.name}
                      className="product-image"
                    />
                  </div>

                  <p className="product-info" style={{ fontWeight: "bold" }}>
                    {productData.name}
                  </p>

                  <p className="product-info">{productData.description}</p>
                  <p className="product-info">
                    {" "}
                    <span>₹</span>
                    {productData.price}
                  </p>

                  <Button
                    variant="contained"
                    color="primary"
                    startIcon={<EditIcon />}
                    style={{
                      width: "35%",
                      margin: "0 auto",
                      marginTop: "10px",
                    }}
                    onClick={() => handleEditProduct(productData)}
                  >
                    Edit
                  </Button>
                </Card>
              </div>
            ))}
        </div>
      </div>
      <Modal visible={isModalOpen} onCancel={handleCancel} footer={null}>
        <Form
          form={form}
          name="nest-messages"
          onFinish={onFinish}
          {...layout}
          style={{
            maxWidth: 850,
          }}
          className="form-portfolio"
        >
          <div className="form-row">
            <div className="form-column">
              <Form.Item
                label="Upload File"
                name="upload"
                style={{ width: "100%", color: "black", fontWeight: "bold" }}
              >
                <Upload
                  listType="picture-card"
                  fileList={fileList}
                  onPreview={handlePreview}
                  onChange={handleChange}
                >
                  {fileList.length >= 1 ? null : uploadButton}
                </Upload>
                {previewImage && (
                  <Image
                    wrapperStyle={{
                      display: "none",
                    }}
                    preview={{
                      visible: previewOpen,
                      onVisibleChange: (visible) => setPreviewOpen(visible),
                      afterOpenChange: (visible) =>
                        !visible && setPreviewImage(""),
                    }}
                    src={previewImage}
                  />
                )}
              </Form.Item>

              <Form.Item
                label="Product Name"
                name="name"
                style={{ width: "100%", fontWeight: "bold" }}
              >
                <Input
                  style={{
                    width: "80%",
                    height: "40px",
                    backgroundColor: "rgba(0, 0, 0, 0.04)",
                  }}
                />
              </Form.Item>
            </div>

            <div className="form-column">
              <Form.Item
                label="Description"
                name="description"
                style={{ width: "100%", fontWeight: "bold" }}
              >
                <Input
                  style={{
                    width: "80%",
                    height: "40px",
                    backgroundColor: "rgba(0, 0, 0, 0.04)",
                  }}
                />
              </Form.Item>
              <Form.Item
                label="Category"
                name="category"
                style={{ width: "100%", fontWeight: "bold" }}
              >
                <Input
                  style={{
                    width: "80%",
                    height: "40px",
                    backgroundColor: "rgba(0, 0, 0, 0.04)",
                  }}
                />
              </Form.Item>
              <Form.Item
                label="Price"
                name="price"
                style={{ width: "100%", fontWeight: "bold" }}
                rules={[
                  {
                    required: true,
                    message: "Please enter the price!",
                  },
                  {
                    pattern: /^[0-9]*$/,
                    message:
                      "Please enter a valid price (only numbers allowed)!",
                  },
                ]}
              >
                <Input
                  style={{
                    width: "80%",
                    height: "40px",
                    backgroundColor: "rgba(0, 0, 0, 0.04)",
                  }}
                />
              </Form.Item>
            </div>
          </div>

          <div className="form-row">
            <div className="form-column">
              <Form.Item
                label="Available"
                name="available"
                style={{ width: "100%", fontWeight: "bold" }}
              >
                <Radio.Group onChange={onChange} value={value}>
                  <Radio value={1}>Yes</Radio>
                  <Radio value={0}>No</Radio>
                </Radio.Group>
              </Form.Item>
            </div>
            <div className="form-column">
              <Form.Item
                label="Type "
                name="type"
                style={{ width: "100%", fontWeight: "bold" }}
              >
                <Radio.Group onChange={TypeChange} value={value}>
                  <Radio value={1}>Normal</Radio>
                  <Radio value={2}>Subscription</Radio>
                </Radio.Group>
              </Form.Item>
              {value === 2 && (
                <Form.Item
                  label="Subscription Plan"
                  name="subscriptionPlanId"
                  style={{ width: "100%", fontWeight: "bold" }}
                >
                  <Select
                    value={subscriptionPlan}
                    onChange={onSubscriptionPlanChange}
                    style={{ width: "100%" }}
                  >
                    <Option value="1">7 Days</Option>
                    <Option value="2">15 Days</Option>
                    <Option value="3">30 Days</Option>
                  </Select>
                </Form.Item>
              )}
            </div>
          </div>

          <hr style={{ width: "80%" }} />

          <Form.Item wrapperCol={{ offset: 8 }}>
            <Button
              type="button"
              htmlType="submit"
              className="btn-portfolio-form"
              onClick={onFinish}
            >
              Submit
            </Button>
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
};

export default AdminProduct;




import { Card, Button } from "@mui/material";
import React, { useEffect, useState } from "react";
import ShoppingCartIcon from "@mui/icons-material/ShoppingCart";
import { useDispatch } from "react-redux";
import { addCart } from "../redux/action/index";
import DeleteIcon from "@mui/icons-material/Delete";
import "../Admin/Adminn.css";
import EditIcon from "@mui/icons-material/Edit";
import { Modal, Form, Input, Upload, Image, Radio, Select } from "antd";
import axios from "axios";
import { PlusOutlined } from "@ant-design/icons";
import api from "../api"; // Import the axios instance
import { notification } from 'antd';

const { Option } = Select;

const getBase64 = (file) =>
  new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => resolve(reader.result);
    reader.onerror = (error) => reject(error);
  });

const AdminProduct = () => {
  const [openSidebarToggle, setOpenSidebarToggle] = useState(false);
  const [data, setData] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingProduct, setEditingProduct] = useState(null);
  const dispatch = useDispatch();
  const [form] = Form.useForm();
  const [value, setValue] = useState(1);
  const [previewOpen, setPreviewOpen] = useState(false);
  const [previewImage, setPreviewImage] = useState("");
  const [fileList, setFileList] = useState([]);
  const [showImage, setShowImage] = useState(false);
  const [subscriptionPlan, setSubscriptionPlan] = useState(null);

  const TypeChange = (e) => {
    setValue(e.target.value);
    if (e.target.value === 1) {
      setSubscriptionPlan(null);
    }
  };

  const onSubscriptionPlanChange = (value) => {
    setSubscriptionPlan(value);
  };

  const onChange = (e) => {
    setValue(e.target.value);
  };

  const handlePreview = async (file) => {
    if (!file.url && !file.preview) {
      file.preview = await getBase64(file.originFileObj);
    }
    setPreviewImage(file.url || file.preview);
    setPreviewOpen(true);
  };

  const handleChange = ({ fileList: newFileList }) => setFileList(newFileList);

  const uploadButton = (
    <button
      style={{
        border: 0,
        background: "none",
      }}
      type="button"
    >
      <PlusOutlined />
      <div
        style={{
          marginTop: 8,
        }}
      >
        Upload
      </div>
    </button>
  );

  const OpenSidebar = () => {
    setOpenSidebarToggle(!openSidebarToggle);
  };

  const fetchData = async () => {
    try {
      const response = await api.get("/api/products");
      setData(response.data);

      if (response.data.length > 0 && response.data[0].imageUrl) {
        setShowImage(response.data[0].imageUrl);
      }
    } catch (error) {
      console.error("Error fetching data:", error.message);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  const addToCart = (product) => {
    dispatch(addCart(product));
  };

  const handleAddProduct = () => {
    setEditingProduct(null);
    setIsModalOpen(true);
    form.resetFields();
  };

  const handleEditProduct = (product) => {
    setEditingProduct(product);
    setIsModalOpen(true);

    form.setFieldsValue({
      upload: product.imageUrl,
      name: product.name,
      description: product.description,
      stock: product.stock,
      price: product.price,
      category: product.category,
      available: product.available === "Yes" ? 1 : 0,
      type: product.type === "NORMAL" ? 1 : 2,
      subscriptionPlanId: product.subscriptionPlanId || null,
    });
    setFileList([]);
    setValue(product.type === "NORMAL" ? 1 : 2);
    setSubscriptionPlan(product.subscriptionPlanId || null);
  };

  const handleOk = () => {
    setIsModalOpen(false);
  };

  const handleCancel = () => {
    setIsModalOpen(false);
  };

  const handleRemoveProduct = async (productId) => {
    try {
      await api.delete(`/api/products/${productId}`);
      fetchData();
    } catch (error) {
      console.error("Error deleting product:", error);
    }
  };

  const onFinish = async () => {
    try {
      const values = await form.validateFields();
      const formData = new FormData();
      formData.append("name", values.name);
      formData.append("description", values.description);
      formData.append("available", values.available === 1 ? "Yes" : "No");
      formData.append("price", values.price);
      formData.append("category", values.category);
      formData.append("image", fileList[0]?.originFileObj);
      formData.append("type", value === 1 ? "NORMAL" : "SUBSCRIPTION");

      if (value === 2) {
        formData.append("subscriptionPlanId", subscriptionPlan);
      }

      if (editingProduct) {
        await api.put(`/api/products/update/${editingProduct.id}`, formData, {
          headers: {
            "Content-Type": "multipart/form-data",
          },
        });
      } else {
        await api.post("/api/products/add", formData, {
          headers: {
            "Content-Type": "multipart/form-data",
          },
        });
      }
      const message = editingProduct ? 'Product Updated Successfully' : 'Product Added Successfully';
      const description = editingProduct ? 'The product has been updated successfully.' : 'The new product has been added successfully.';
      notification.success({
        message: message,
        description: description,
      });

      fetchData();
      setIsModalOpen(false);
    } catch (error) {
      console.error("Error adding/updating product:", error);
    }
  };

  const layout = {
    labelCol: {
      span: 8,
    },
    wrapperCol: {
      span: 15,
    },
  };

  return (
    <div className="product-page">
      <div className="content">
        <div>
          <button
            onClick={handleAddProduct}
            type="button"
            className="btn btn-primary"
          >
            Add New Product
          </button>
        </div>

        <div className="Product-container">
          {Array.isArray(data) &&
            data.map((productData, index) => (
              <div key={index} className="product-item">
                <Card className="card newcard">
                  <div style={{ position: "relative" }}>
                    <DeleteIcon
                      style={{
                        position: "absolute",
                        bottom: "-4px",
                        left: "240px",
                        cursor: "pointer",
                      }}
                      onClick={() => handleRemoveProduct(productData.id)}
                    />
                  </div>
                  <div className="image-container">
                    <img
                      src={`data:image/jpg;base64,${productData.imageUrl}`}
                      alt={productData.name}
                      className="product-image"
                    />
                  </div>

                  <p className="product-info" style={{ fontWeight: "bold" }}>
                    {productData.name}
                  </p>

                  <p className="product-info">{productData.description}</p>
                  <p className="product-info">
                    {" "}
                    <span>₹</span>
                    {productData.price}
                  </p>

                  <Button
                    variant="contained"
                    color="primary"
                    startIcon={<EditIcon />}
                    style={{
                      width: "35%",
                      margin: "0 auto",
                      marginTop: "10px",
                    }}
                    onClick={() => handleEditProduct(productData)}
                  >
                    Edit
                  </Button>
                </Card>
              </div>
            ))}
        </div>
      </div>
      <Modal visible={isModalOpen} onCancel={handleCancel} footer={null}>
        <Form
          form={form}
          name="nest-messages"
          onFinish={onFinish}
          {...layout}
          style={{
            maxWidth: 850,
          }}
          className="form-portfolio"
        >
          <div className="form-row">
            <div className="form-column">
              <Form.Item
                label="Upload File"
                name="upload"
                style={{ width: "100%", color: "black", fontWeight: "bold" }}
              >
                <Upload
                  listType="picture-card"
                  fileList={fileList}
                  onPreview={handlePreview}
                  onChange={handleChange}
                >
                  {fileList.length >= 1 ? null : uploadButton}
                </Upload>
                {previewImage && (
                  <Image
                    wrapperStyle={{
                      display: "none",
                    }}
                    preview={{
                      visible: previewOpen,
                      onVisibleChange: (visible) => setPreviewOpen(visible),
                      afterOpenChange: (visible) =>
                        !visible && setPreviewImage(""),
                    }}
                    src={previewImage}
                  />
                )}
              </Form.Item>

              <Form.Item
                label="Product Name"
                name="name"
                style={{ width: "100%", fontWeight: "bold" }}
              >
                <Input
                  style={{
                    width: "80%",
                    height: "40px",
                    backgroundColor: "rgba(0, 0, 0, 0.04)",
                  }}
                />
              </Form.Item>
            </div>

            <div className="form-column">
              <Form.Item
                label="Description"
                name="description"
                style={{ width: "100%", fontWeight: "bold" }}
              >
                <Input
                  style={{
                    width: "80%",
                    height: "40px",
                    backgroundColor: "rgba(0, 0, 0, 0.04)",
                  }}
                />
              </Form.Item>
              <Form.Item
                label="Category"
                name="category"
                style={{ width: "100%", fontWeight: "bold" }}
              >
                <Input
                  style={{
                    width: "80%",
                    height: "40px",
                    backgroundColor: "rgba(0, 0, 0, 0.04)",
                  }}
                />
              </Form.Item>
              <Form.Item
                label="Price"
                name="price"
                style={{ width: "100%", fontWeight: "bold" }}
                rules={[
                  {
                    required: true,
                    message: "Please enter the price!",
                  },
                  {
                    pattern: /^[0-9]*$/,
                    message:
                      "Please enter a valid price (only numbers allowed)!",
                  },
                ]}
              >
                <Input
                  style={{
                    width: "80%",
                    height: "40px",
                    backgroundColor: "rgba(0, 0, 0, 0.04)",
                  }}
                />
              </Form.Item>
            </div>
          </div>

          <div className="form-row">
            <div className="form-column">
              <Form.Item
                label="Available"
                name="available"
                style={{ width: "100%", fontWeight: "bold" }}
              >
                <Radio.Group onChange={onChange} value={value}>
                  <Radio value={1}>Yes</Radio>
                  <Radio value={0}>No</Radio>
                </Radio.Group>
              </Form.Item>
            </div>
            <div className="form-column">
              <Form.Item
                label="Type "
                name="type"
                style={{ width: "100%", fontWeight: "bold" }}
              >
                <Radio.Group onChange={TypeChange} value={value}>
                  <Radio value={1}>Normal</Radio>
                  <Radio value={2}>Subscription</Radio>
                </Radio.Group>
              </Form.Item>
              {value === 2 && (
                <Form.Item
                  label="Subscription Plan"
                  name="subscriptionPlanId"
                  style={{ width: "100%", fontWeight: "bold" }}
                >
                  <Select
                    value={subscriptionPlan}
                    onChange={onSubscriptionPlanChange}
                    style={{ width: "100%" }}
                  >
                    <Option value="1">7 Days</Option>
                    <Option value="2">15 Days</Option>
                    <Option value="3">30 Days</Option>
                  </Select>
                </Form.Item>
              )}
            </div>
          </div>

          <hr style={{ width: "80%" }} />

          <Form.Item wrapperCol={{ offset: 8 }}>
            <Button
              type="button"
              htmlType="submit"
              className="btn-portfolio-form"
              onClick={onFinish}
            >
              Submit
            </Button>
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
};

export default AdminProduct;





import React, { useEffect, useState } from 'react';
import { Table, Button, Modal, Form, Input, InputNumber, message } from 'antd';
import api from '../api'; // Import the axios instance

const columns = [
  {
    title: 'ID',
    dataIndex: 'id',
    key: 'id',
    render: (text) => <a>{text}</a>,
    width: 150,
  },
  {
    title: 'item',
    dataIndex: 'item',
    key: 'item',
    render: (text) => <a>{text}</a>,
    width: 150,
  },
  {
    title: 'price',
    dataIndex: 'price',
    key: 'price',
    render: (text) => <a>{text}</a>,
    width: 150,
  },
  {
    title: 'quantity',
    dataIndex: 'quantity',
    key: 'quantity',
    render: (text) => <a>{text}</a>,
    width: 150,
  },
  {
    title: 'totalAmount',
    dataIndex: 'totalAmount',
    key: 'totalAmount',
    render: (text) => <a>{text}</a>,
    width: 150,
  },
  {
    title: 'date',
    dataIndex: 'date',
    key: 'date',
    render: (text) => {
      const formattedDate = text ? new Date(parseInt(text)).toLocaleDateString() : "N/A";
      return <span>{formattedDate}</span>;
    },
    width: 10,
  },
];

const App = () => {
  const [data, setData] = useState([]);
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [form] = Form.useForm();

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      const response = await api.get('/api/inventory/all');
      const sortedData = response.data.sort((a, b) => b.id - a.id);
      setData(sortedData);
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  };

  const showModal = () => {
    setIsModalVisible(true);
  };

  const handleSubmit = async (values) => {
    try {
      const response = await api.post('/api/inventory/add', values);
      message.success('Inventory item added successfully');
      setIsModalVisible(false);
      form.resetFields();
      fetchData(); // Fetch data after adding a new item
    } catch (error) {
      console.error('Error adding inventory item:', error);
      message.error('Failed to add inventory item');
    }
  };

  const handleCancel = () => {
    setIsModalVisible(false);
    form.resetFields();
  };

  return (
    <div className="table-container">
      <div style={{  marginBottom: '16px' }}>
        <Button type="primary" onClick={showModal}>Inventory</Button>
      </div>
      <Table columns={columns} dataSource={data} />

      <Modal
        title="Add Inventory Item"
        visible={isModalVisible}
        footer={null} // Remove default footer buttons
        onCancel={handleCancel} // Optional: close modal on outside click or "X" button
      >
        <Form form={form} layout="vertical" onFinish={handleSubmit}>
          <Form.Item
            name="item"
            label="Item"
            rules={[{ required: true, message: 'Please input the item name!' }]}
          >
            <Input />
          </Form.Item>
          <Form.Item
            name="quantity"
            label="Quantity"
            rules={[{ required: true, message: 'Please input the quantity!' }]}
          >
            <InputNumber min={1} style={{ width: '100%' }} />
          </Form.Item>
          <Form.Item
            name="price"
            label="Price"
            rules={[{ required: true, message: 'Please input the price!' }]}
          >
            <InputNumber min={0} step={0.01} style={{ width: '100%' }} />
          </Form.Item>
          <Form.Item>
            <Button type="primary" htmlType="submit" style={{ width: '100%' }}>
              Submit
            </Button>
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
};

export default App;



import React, { useState, useEffect } from "react";
import { MenuFoldOutlined, MenuUnfoldOutlined, UserOutlined, ShoppingOutlined } from "@ant-design/icons";
import { Button, Layout, Menu, theme } from "antd";
import AdminDashboard from "./AdminDashboard";
import AdminProduct from "./AdminProduct";
import "../Admin/Adminn.css";
import User from "./User";
import UserOrder from "./UserOrder";
import GroupIcon from "@mui/icons-material/Group";
import LogoutIcon from "@mui/icons-material/Logout";
import AdminSubscription from "./AdminSubscription";
import ShoppingCartIcon from '@mui/icons-material/ShoppingCart';
import LibraryBooksIcon from '@mui/icons-material/LibraryBooks';
import AssignmentIcon from '@mui/icons-material/Assignment';
import Inventory from "./Inventory";

const { Header, Sider, Content } = Layout;

const Sidee = () => {
  const [collapsed, setCollapsed] = useState(false);
  const [selectedMenuItem, setSelectedMenuItem] = useState("1");
  const {
    token: { colorBgContainer, borderRadiusLG },
  } = theme.useToken();

  // Function to handle menu item selection
  const handleMenuSelect = (item) => {
    setSelectedMenuItem(item.key);
    localStorage.setItem('selectedMenuItem', item.key); // Store selected menu item in localStorage
  };

  useEffect(() => {
    // Retrieve selected menu item from localStorage when component mounts
    const storedSelectedItem = localStorage.getItem('selectedMenuItem');
    if (storedSelectedItem) {
      setSelectedMenuItem(storedSelectedItem);
    }
  }, []);

  return (
    <Layout style={{ minHeight: "100vh" }}>
      <Sider
        trigger={null}
        collapsible
        collapsed={collapsed}
        style={{
          overflow: "auto",
          height: "100vh",
          position: "fixed",
          left: 0,
        }}
      >
        <div className="demo-logo-vertical" />
        <Menu
          theme="dark"
          mode="inline"
          selectedKeys={[selectedMenuItem]}
          onSelect={handleMenuSelect}
          items={[
            {
              key: "1",
              icon: <UserOutlined />,
              label: <span style={{ color: "white" }}>Dashboard</span>,
            },
            {
              key: "2",
              icon: <ShoppingOutlined />,
              label: <span style={{ color: "white" }}>Products</span>,
            },
            {
              key: "3",
              icon: <GroupIcon />,
              label: <span style={{ color: "white" }}>Users</span>,
            },
            {
              key: "4",
              icon: <AssignmentIcon />,
              label: <span style={{ color: "white" }}>UserOrder</span>,
            },
            {
              key: "5",
              icon: <LibraryBooksIcon />,
              label: <span style={{ color: "white" }}>Subscription</span>,
            },
            {
              key: "6",
              icon: <ShoppingCartIcon />,
              label: <span style={{ color: "white" }}>Inventory</span>,
            },
            {
              key: "7",
              icon: <LogoutIcon />,
              label: <span style={{ color: "white" }}>Logout</span>,
            },
          ]}
        />
        {/* Toggle button inside the Sider */}
        <Button
          type="text"
          icon={collapsed ? <MenuUnfoldOutlined /> : <MenuFoldOutlined />}
          onClick={() => setCollapsed(!collapsed)}
          style={{
            fontSize: "16px",
            width: 64,
            height: 64,
            position: "absolute",
            bottom: 0,
            left: 0,
            marginBottom: 24,
          }}
        />
      </Sider>
      <Layout
        className="site-layout"
        style={{ marginLeft: collapsed ? 80 : 200 }}
      >
        <Header
          style={{
            background: colorBgContainer,
            padding: "0 16px",
            lineHeight: "64px",
            position: "fixed",
            width: "100%",
            zIndex: 1000,
          }}
        >
          <Button
            type="text"
            icon={collapsed ? <MenuUnfoldOutlined /> : <MenuFoldOutlined />}
            onClick={() => setCollapsed(!collapsed)}
            style={{
              fontSize: "16px",
              width: 64,
              height: 64,
            }}
          />
        </Header>
        <Content
          style={{
            margin: "88px 16px 24px",
            padding: 24,
            minHeight: 280,
            background: colorBgContainer,
            borderRadius: borderRadiusLG,
          }}
        >
          {selectedMenuItem === "1" && <AdminDashboard />}
          {selectedMenuItem === "2" && <AdminProduct />}
          {selectedMenuItem === "3" && <User />}
          {selectedMenuItem === "4" && <UserOrder />}
          {selectedMenuItem === "5" && <AdminSubscription />}
          {selectedMenuItem === "6" && <Inventory />}
        </Content>
      </Layout>
    </Layout>
  );
};

export default Sidee;



import React, { useEffect, useState } from 'react';
import { Table, Tooltip } from 'antd';
import axios from 'axios';
import api from '../api'; // Import the axios instance


const columns = [
  {
    title: 'ID',
    dataIndex: 'id',
    key: 'id',
    render: (text) => <a>{text}</a>,
    width: 150,
  },
  {
    title: 'USERNAME',
    dataIndex: 'username',
    key: 'username',
    render: (text) => <a>{text}</a>,
    width: 150,
  },
  
  {
    title: 'EMAIL',
    dataIndex: 'email',
    key: 'email',
    render: (text) => <a>{text}</a>,
    width: 150,
  },
  {
    title: 'MOBILE',
    dataIndex: 'mobile',
    key: 'mobile',
    render: (text) => <a>{text}</a>,
    width: 150,
  },
  
 
];

const App = () => {
  const [data, setData] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await api.get('/api/users/all');
        const sortedData = response.data.sort((a, b) => b.id - a.id); // Sorting in descending order based on ID
        setData(sortedData);
      } catch (error) {
        console.error('Error fetching data:', error);
      }
    };

    fetchData();
  }, []);

  return (
    <div className="table-container">
      <Table columns={columns} dataSource={data} />
    </div>
  );
};

export default App;

user^







import React, { useEffect, useState } from "react";
import { Table, Button, message } from "antd";
import api from "../api";

const UserOrder = () => {
  const [data, setData] = useState([]);
  const [disabledButtons, setDisabledButtons] = useState({});

  useEffect(() => {
    const savedDisabledButtons =
      JSON.parse(localStorage.getItem("disabledButtons")) || {};
    setDisabledButtons(savedDisabledButtons);
  }, []);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await api.get("/api/orders/all");

        const sortedData = response.data.sort(
          (a, b) => new Date(b.orderDate) - new Date(a.orderDate)
        );
        setData(sortedData);
      } catch (error) {
        console.error("Error fetching data:", error);
      }
    };

    fetchData();
  }, []);

  const handleApprove = async (orderId) => {
    try {
      await api.put(`/api/orders/${orderId}/approve`);
      message.success("Order approved successfully");
      updateOrderStatus(orderId, "Approved");
      setButtonDisabled(orderId, { approve: true, cancel: true });
    } catch (error) {
      console.error("Error approving order:", error);
      message.error("Failed to approve order");
    }
  };

  const handleShipped = async (orderId) => {
    try {
      await api.put(`/api/orders/${orderId}/shipped`);
      message.success("Order marked as shipped");
      updateOrderStatus(orderId, "Shipped");
      setButtonDisabled(orderId, { shipped: true });
    } catch (error) {
      console.error("Error marking order as shipped:", error);
      message.error("Failed to mark order as shipped");
    }
  };

  const handleDeliver = async (orderId) => {
    try {
      await api.put(`/api/orders/${orderId}/deliver`);
      message.success("Order delivered successfully");
      updateOrderStatus(orderId, "Delivered");
      setButtonDisabled(orderId, {
        approve: true,
        shipped: true,
        cancel: true,
        deliver: true,
      });
    } catch (error) {
      console.error("Error delivering order:", error);
      message.error("Failed to deliver order");
    }
  };

  const handleCancel = async (orderId) => {
    try {
      await api.put(`/api/orders/${orderId}/cancel`);
      message.success("Order cancelled successfully");
      updateOrderStatus(orderId, "Cancelled");
      setButtonDisabled(orderId, {
        cancel: true,
        approve: true,
        shipped: true,
        deliver: true,
      });
    } catch (error) {
      console.error("Error cancelling order:", error);
      message.error("Failed to cancel order");
    }
  };

  const handleStart = async (subscriptionID) => {
    try {
      // Make API call to start the subscription
      await api.put(`/api/subscriptions/${subscriptionID}/start`);
      setButtonDisabled(subscriptionID, { start: true });
      message.success("Subscription started successfully");
    } catch (error) {
      message.error("Failed to start subscription");
    }
  };

  const handleEnd = async (subscriptionID) => {
    try {
      // Make API call to end the subscription
      await api.put(`/api/subscriptions/${subscriptionID}/end`);
      setButtonDisabled(subscriptionID, { end: true });
      message.success("Subscription ended successfully");
    } catch (error) {
      console.error("Error ending subscription:", error);
      message.error("Failed to end subscription");
    }
  };

  const updateOrderStatus = (orderId, status) => {
    setData((prevData) =>
      prevData.map((order) =>
        order.id === orderId ? { ...order, status } : order
      )
    );
  };

  const setButtonDisabled = (orderId, buttons) => {
    setDisabledButtons((prev) => {
      const updated = { ...prev, [orderId]: { ...prev[orderId], ...buttons } };
      localStorage.setItem("disabledButtons", JSON.stringify(updated));
      return updated;
    });
  };

  const columns = [
    {
      title: "ID",
      dataIndex: "id",
      key: "id",
      width: 50,
    },
    {
      title: "First Name",
      dataIndex: "firstName",
      key: "firstName",
      width: 100,
    },
    {
      title: "Last Name",
      dataIndex: "lastName",
      key: "lastName",
      width: 100,
    },
    {
      title: "Address",
      dataIndex: "address",
      key: "address",
      width: 50,
    },
    {
      title: "Order Date",
      dataIndex: "orderDate",
      key: "orderDate",
      render: (text) => {
        const formattedDate = new Date(parseInt(text)).toLocaleDateString();
        return <span>{formattedDate}</span>;
      },
      width: 100,
    },
    {
      title: "Total Amount",
      dataIndex: "totalAmount",
      key: "totalAmount",
      width: 100,
    },
    {
      title: "Mobile",
      dataIndex: "mobile",
      key: "mobile",
      width: 100,
    },
    {
      title: "Zip Code",
      dataIndex: "zip",
      key: "zip",
      width: 100,
    },
    {
      title: "Product Name",
      dataIndex: "orderItems",
      key: "orderItems",
      render: (orderItems) => {
        if (orderItems && orderItems.length > 0) {
          return (
            <div>
              {orderItems.map((item, index) => (
                <div key={index}>
                  <span>{item.product.name}</span>
                </div>
              ))}
            </div>
          );
        } else {
          return "";
        }
      },
      width: 150,
    },
    {
      title: "Type",
      dataIndex: "orderItems",
      key: "type",
      render: (orderItems) => {
        if (orderItems && orderItems.length > 0) {
          return (
            <div>
              {orderItems.map((item, index) => (
                <div key={index}>
                  <span>{item.product.type}</span>
                </div>
              ))}
            </div>
          );
        } else {
          return "";
        }
      },
      width: 100,
    },
    {
      title: "Order Items",
      dataIndex: "orderItems",
      key: "orderItems",
      render: (orderItems) => (
        <div>
          {orderItems.map((item, index) => (
            <div key={index}>
              <span>Quantity: {item.quantity}</span>{" "}
            </div>
          ))}
        </div>
      ),
      width: 150,
    },
    {
      title: "Order ID",
      dataIndex: "orderItems",
      key: "order",
      render: (orderItems) => (
        <div>
          {orderItems.map((item, index) => (
            <div key={index}>
              <span>{item.order}</span>
            </div>
          ))}
        </div>
      ),
      width: 100,
    },
    {
      title: "Actions",
      key: "actions",
      render: (text, record) => (
        <div>
          <Button
            onClick={() => handleApprove(record.id)}
            disabled={disabledButtons[record.id]?.approve}
          >
            Approve
          </Button>
          <Button
            onClick={() => handleShipped(record.id)}
            disabled={disabledButtons[record.id]?.shipped}
          >
            Shipped
          </Button>
          <Button
            onClick={() => handleDeliver(record.id)}
            disabled={disabledButtons[record.id]?.deliver}
          >
            Deliver
          </Button>
          <Button
            onClick={() => handleCancel(record.id)}
            disabled={
              disabledButtons[record.id]?.cancel ||
              disabledButtons[record.id]?.approve
            }
          >
            Cancel
          </Button>
        </div>
      ),
      width: 250,
    },
  ];

  return (
    <div className="table-container">
      <Table columns={columns} dataSource={data} rowKey="id" />
    </div>
  );
};

export default UserOrder;





import React from "react";
import Slider from "react-slick";
import "slick-carousel/slick/slick.css";
import "slick-carousel/slick/slick-theme.css";
import banner1 from "../assets/banner1.png";
import Banner2 from "../assets/Baneer2.png";
import banner3 from "../assets/baneer3.png";
import banner4 from "../assets/baneer4.png"


import "../SmallSlider/SmallSlier.css";
// import { NavLink, Navigate } from "react-router-dom";


const Banners = () => {
  const settings = {
    dots: true,
    infinite: true,
    speed: 500,
    slidesToShow: 3,
    slidesToScroll: 1,
    autoplay: true,
    autoplaySpeed: 2000,
    responsive: [
      {
        breakpoint: 768,
        settings: {
          slidesToShow: 2,
          slidesToScroll: 1,
        },
      },
      {
        breakpoint: 576,
        settings: {
          slidesToShow: 1,
          slidesToScroll: 1,
        },
      },
    ],
    
  };



 

  return (
    <div className="bannerSection">
      <div className="container-fluid">
        <div className="row">
          <Slider {...settings}>
            <div className="col">
              <div className="box">
                <img
                  src={banner1}
                  className="w-100 transition"
                  alt="Banner 1"
                />
              </div>
            </div>

            <div className="col">
              <div className="box">
                <img
                  src={Banner2}
                  className="w-100 transition"
                  alt="Banner 2"
                />
              </div>
            </div>

            <div className="col">
              <div className="box">
                <img
                  src={banner3}
                  className="w-100 transition"
                  alt="Banner 3"
                />
              </div>
            </div>
            <div className="col">
              <div className="box">
                <img
                  src={banner4}
                  className="w-100 transition"
                  alt="Banner 3"
                />
              </div>
            </div>
            <div className="col">
              <div className="box">
                <img
                  src={banner3}
                  className="w-100 transition"
                  alt="Banner 3"
                />
              </div>
            </div>
          </Slider>  
        </div>
      </div>
    </div>
  );
};


export default Banners;


.bannerSection{padding: 25px 0px; }

/* .bannerSection .box{overflow: hidden; border-radius: 15px; cursor: pointer;}
.bannerSection .box:hover img{transform: scale(1.1)} */


/* Custom css */


.custom-prev-arrow {
    position: absolute;
    top: 50%;
    left: 10px;
    z-index: 1;
    transform: translateY(-50%);
    background-color: transparent;
    border: none;
    color: white;
    font-size: 18px;
    cursor: pointer;
  }
  
  /* Custom styles for next arrow */
  .custom-next-arrow {
    position: absolute;
    top: 50%;
    right: 10px;
    z-index: 1;
    transform: translateY(-50%);
    background-color: transparent;
    border: none;
    color: white;
    font-size: 18px;
    cursor: pointer;
  }
  

  .menu-button {
    background-color: #FFD700; 
    color: #FFFFFF; 
    border: none; 
    padding: 10px 20px; 
    font-size: 16px; 
    border-radius: 5px; 
    cursor: pointer; 
    transition: background-color 0.3s ease; 
    margin-right: 10px;
    margin-bottom: 10px;
  }
  
  .menu-button:hover {
    background-color: #FFA500;
  }
  .menu-heading {
    padding-top: 55px;
}

.menu-item {
  text-align: center;
}

.menu-item img {
  width: 100px;
  height: 100px; 
  border-radius: 50%; 
  margin-bottom: 5px; 
}

.menu-item p {
  margin: 0; 
}
.align-items-center{
  padding-top: 22px;
}
.banner-image {
  max-width: 100%;
  height: auto;
  max-height: 150px; 
 
}
.box {
  margin: 0 10px; 
}
.slick-dots li {
  margin: 0 5px; 
}

@media (max-width: 320px) {

    .bannerSection {
      padding: 15px 0px; 
    }
  
    .bannerSection .box {
      border-radius: 10px; 
    }
  
    .menu-heading {
      padding-top: 45px;
    }
  
    .menu-item img {
      width: 60px; 
      height: 60px; 
    }
    .d-flex{
      overflow-x: scroll;
    }
    .menu-item{
      width: 400px;
    }
  }
  @media (max-width: 400px) {
    .bannerSection {
      padding: 15px 0px; 
    }
  
    .bannerSection .box {
      border-radius: 10px; 
    }
  
    .menu-heading {
      padding-top: 45px;
    }
  
    .menu-item img {
      width: 60px; 
      height: 60px; 
    }
    .d-flex{
      overflow-x: scroll;
    }
    .menu-item{
      width: 400px;
    }

  }
  @media (max-width: 575px) {
    .bannerSection {
      padding: 15px 0px; 
    }
  
    .bannerSection .box {
      border-radius: 10px; 
    }
  
    .menu-heading {
      padding-top: 45px;
    }
  
    .menu-item img {
      width: 60px; 
      height: 60px; 
    }
    .d-flex{
      overflow-x: scroll;
    }
    .menu-item{
      width: 400px;
    }
  }
  @media (min-width: 576px) and (max-width: 767px) {
    .bannerSection {
      padding: 15px 0px; 
    }
  
    .bannerSection .box {
      border-radius: 10px; 
    }
  
    .menu-heading {
      padding-top: 45px;
    }
  
    .menu-item img {
      width: 60px; 
      height: 60px; 
    }
    .d-flex{
      overflow-x: scroll;
    }
    .menu-item{
      width: 400px;
    }

  }
  @media (min-width: 768px) and (max-width: 991px) {
    .bannerSection {
      padding: 15px 0px; 
    }
  
    .bannerSection .box {
      border-radius: 10px; 
    }
  
    .menu-heading {
      padding-top: 45px;
    }
  
    .menu-item img {
      width: 60px; 
      height: 60px; 
    }
    .d-flex{
      overflow-x: scroll;
    }
    .menu-item{
      width: 400px;
    }

    

  }



reducer++++++++++++++++++++++++++++++++++++++++++++++++++


const cart = []

const handleCart = (state=cart, action) =>  {
    const product = action.payload
    switch(action.type){
        case "ADDITEM":
            // Check if product already in cart
            const exist = state.find((x) => x.id === product.id)
            if(exist){
                // Increase the quantity
                return state.map((x)=>x.id ===product.id?{...x, qty: x.qty+1}:x)
            }
            else{
                return [...state, {...product, qty:1}]
            }
        case "DELITEM":
            const exist2 = state.find((x) => x.id === product.id)
            if(exist2.qty === 1){
                return state.filter((x)=>x.id!==exist2.id)
            }
            else{
                return state.map((x)=> x.id===product.id?{...x, qty:x.qty-1}:x)
            }
        default:
            return state
    }
}

export default handleCart




import handleCart from './handleCart'
import { combineReducers } from "redux";



const rootReducers = combineReducers({
    handleCart,
})

export default rootReducers


import handleCart from './handleCart'
import { combineReducers } from "redux";



const rootReducers = combineReducers({
    handleCart,
})

export default rootReducers














